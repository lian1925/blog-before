[{"title":"博客添加图标样式","date":"2017-10-05T06:16:02.000Z","path":"2017/10/05/blog-icon-style/","text":"目标：为博客添加好看的图标样式，提示阅读体验。 图标库阿里巴巴矢量图标库第一步，在图标库中搜索所需的图标第二步，将选好的图标加入项目，如:blog第三步，在HTML和css文件中引用 获取项目生成的css文件链接，加入html文件的头部&lt;link rel=\"stylesheet\" href=\"//at.alicdn.com/t/font_407924_kx6yx3r9q4m6xbt9.css\"> 选择所需的图标，获取其class名字，应用于页面&lt;i class=\"iconfont icon-sousuo\">&lt;/i> blog项目图标参考搜索icon-sousuo微博icon-weibogithubicon-githubtwittericon-twitterfacebookicon-facebook斜线icon-xiexian1双箭头icon-shuangjiantou-copy"},{"title":"Nginx 502 错误","date":"2017-10-05T04:15:03.000Z","path":"2017/10/05/nginx-502-error/","text":"最近，部署于阿里云的服务接口，用户请求数据时遭遇502错误的困扰。本文用于记录解决该问题的经过。查看Nginx的错误日志error.log，记录如下：片段1 2017/10/05 11:50:51 [error] 6430#0: *1815 upstream prematurely closed connection while reading response header from upstream, client: 116.25.250.1, server: , request: \"POST /educate/user/course_submit_list HTTP/1.1\", upstream: \"http://127.0.0.1:8080/educate/user/course_submit_list\", host: \"www.luobocode.com\", referrer: \"https://servicewechat.com/wx2ef86638fe2ab2eb/devtools/page-frame.html\" 2017/10/05 11:50:51 [error] 6430#0: *1809 upstream prematurely closed connection while reading response header from upstream, client: 116.25.250.1, server: , request: \"POST /educate/user/submit_check HTTP/1.1\", upstream: \"http://127.0.0.1:8080/educate/user/submit_check\", host: \"www.luobocode.com\", referrer: \"https://servicewechat.com/wx2ef86638fe2ab2eb/devtools/page-frame.html\" 2017/10/05 11:50:51 [error] 6430#0: *1816 upstream prematurely closed connection while reading response header from upstream, client: 116.25.250.1, server: , request: \"POST /educate/auth/check_manager HTTP/1.1\", upstream: \"http://127.0.0.1:8080/educate/auth/check_manager\", host: \"www.luobocode.com\", referrer: \"https://servicewechat.com/wx2ef86638fe2ab2eb/devtools/page-frame.html\" 2017/10/05 11:50:51 [error] 6430#0: *1807 upstream prematurely closed connection while reading response header from upstream, client: 116.25.250.1, server: , request: \"POST /educate/user/subscribe_state HTTP/1.1\", upstream: \"http://127.0.0.1:8080/educate/user/subscribe_state\", host: \"www.luobocode.com\", referrer: \"https://servicewechat.com/wx2ef86638fe2ab2eb/devtools/page-frame.html\" 片段2 2017/10/05 09:44:51 [error] 6430#0: *1084 upstream prematurely closed connection while reading response header from upstream, client: 116.25.250.1, server: , request: \"POST /educate/user/submit_check HTTP/1.1\", upstream: \"http://127.0.0.1:8080/educate/user/submit_check\", host: \"www.luobocode.com\", referrer: \"https://servicewechat.com/wx2ef86638fe2ab2eb/devtools/page-frame.html\" 2017/10/05 09:44:51 [error] 6430#0: *1083 upstream prematurely closed connection while reading response header from upstream, client: 116.25.250.1, server: , request: \"POST /educate/auth/check_manager HTTP/1.1\", upstream: \"http://127.0.0.1:8080/educate/auth/check_manager\", host: \"www.luobocode.com\", referrer: \"https://servicewechat.com/wx2ef86638fe2ab2eb/devtools/page-frame.html\" 2017/10/05 09:44:51 [error] 6430#0: *1064 recv() failed (104: Connection reset by peer) while reading response header from upstream, client: 116.25.250.1, server: , request: \"POST /educate/user/subscribe_state HTTP/1.1\", upstream: \"http://127.0.0.1:8080/educate/user/subscribe_state\", host: \"www.luobocode.com\", referrer: \"https://servicewechat.com/wx2ef86638fe2ab2eb/devtools/page-frame.html\" 2017/10/05 09:44:51 [error] 6430#0: *1063 connect() failed (111: Connection refused) while connecting to upstream, client: 116.25.250.1, server: , request: \"POST /educate/user/course_submit_list HTTP/1.1\", upstream: \"http://127.0.0.1:8080/educate/user/course_submit_list\", host: \"www.luobocode.com\", referrer: \"https://servicewechat.com/wx2ef86638fe2ab2eb/devtools/page-frame.html\" 查看请求日志，记录如下： 116.25.250.1 - - [05/Oct/2017:11:52:56 +0800] \"POST /educate/user/info HTTP/1.1\" 200 441 \"https://servicewechat.com/wx2ef86638fe2ab2eb/devtools/page-frame.html\" \"wechatdevtools appservice port/9974\" 116.25.250.1 - - [05/Oct/2017:11:52:56 +0800] \"POST /educate/manager/course_list HTTP/1.1\" 200 5056 \"https://servicewechat.com/wx2ef86638fe2ab2eb/devtools/page-frame.html\" \"wechatdevtools appservice port/9974\" 116.25.250.1 - - [05/Oct/2017:11:58:32 +0800] \"POST /educate/manager/course_list HTTP/1.1\" 200 5056 \"https://servicewechat.com/wx2ef86638fe2ab2eb/0/page-frame.html\" \"Mozilla/5.0 (iPhone; CPU iPhone OS 9_0 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Mobile/13A342 MicroMessenger/6.5.18 NetType/4G Language/zh_CN\" 116.25.250.1 - - [05/Oct/2017:11:58:32 +0800] \"POST /educate/user/info HTTP/1.1\" 200 441 \"https://servicewechat.com/wx2ef86638fe2ab2eb/0/page-frame.html\" \"Mozilla/5.0 (iPhone; CPU iPhone OS 9_0 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Mobile/13A342 MicroMessenger/6.5.18 NetType/4G Language/zh_CN\" 40.77.167.0 - - [05/Oct/2017:12:13:51 +0800] \"GET / HTTP/1.1\" 200 59 \"-\" \"Mozilla/5.0 (compatible; bingbot/2.0; +http://www.bing.com/bingbot.htm)\" 103.206.22.250 - - [05/Oct/2017:12:23:13 +0800] \"GET http://azenv.net/ HTTP/1.1\" 200 28 \"-\" \"Mozilla/5.0 (compatible; MSIE 6.0; Windows NT 5.1; Trident/5.0)\" 103.206.22.250 - - [05/Oct/2017:12:23:13 +0800] \"CONNECT www.baidu.com:443 HTTP/1.1\" 400 181 \"-\" \"-\" 方案一，将代理服务的失效时间延长 proxy_connect_timeout 600; proxy_send_timeout 600; proxy_read_timeout 600; send_timeout 600; 方案二，添加缓存功能 proxy_cache_path /home/nginx_cache_dir levels=1:2 keys_zone=cache_one:100m inactive=60m max_size=5g ; location / { proxy_cache_valid 200 302 1h; proxy_cache_valid 301 1d; proxy_cache_valid any 1m; proxy_cache cache_one; expires 10m; add_header X-Proxy-Cache $upstream_cache_status; } 方案三，增加缓存空间，延长时间 keepalive_timeout 600; types_hash_max_size 2048; fastcgi_buffers 8 16k; fastcgi_buffer_size 32k; fastcgi_connect_timeout 300; fastcgi_send_timeout 300; fastcgi_read_timeout 300;"},{"title":"博客添加代码高亮特性","date":"2017-10-04T21:15:19.000Z","path":"2017/10/05/blog-code-highlight-feature/","text":"目标：为博客添加代码高亮特性，让代码部分的观赏性加分。 工具hexo-prism-plugin 安装npm i -S hexo-prism-plugin 配置在博客的配置文件_config.yml，加入配置语句： prism_plugin: mode: 'preprocess' # realtime/preprocess theme: 'duotone-light' line_number: false # default false 禁止默认 highlight配置： highlight: enable: false 修改样式将代码块设为圆角，添加浅浅边框，修改后视觉效果更加柔和美观。这里我们只需要修改pre选项，因为所有的代码块都包含在pre节点内,为避免干扰其他使用pre的样式，可加.page前缀。 .page pre { border: 1px solid rgba(0, 0, 0, 0.3); border-radius: 10px; } 清除缓存并启动hexo clean hexo s"},{"title":"网络存储","date":"2017-10-03T12:05:03.000Z","path":"2017/10/03/web-storage/","text":"设备 威联通（QNAP）TS-231P 1G 内存 2盘位NAS网络存储器 双核1.7GHz处理器 2个网络端口 初始化安装"},{"title":"博客实现搜索功能","date":"2017-10-02T16:10:09.000Z","path":"2017/10/03/blog-search-feature/","text":"目标：为博客添加搜索功能，方便用户快速查找对应的文章。实现搜索功能，有两种途径：1）使用第三方搜索公司提供的服务；2）通过自己获取网站数据和关键字匹配，实现搜索功能 第三方服务Algolia可采用Github账号登录使用 自定义搜索功能第一步，我们要获取博客网站的数据，放入文件中，作为搜索功能的数据源。对此我们选用的工具是：hexo-generator-json-content安装方式： npm i -S hexo-generator-json-content 配置在博客配置 _config.yml,添加上面插件的配置语句： jsonContent: meta: false pages: false posts: title: true date: true path: true text: true raw: false content: false slug: false updated: false comments: false link: false permalink: false excerpt: false categories: false tags: false 启动 hexo serve 将自动生成 content.json文件，格式如下： [{ //-> only published posts title: post.title, date: post.date, text: post.content, //-> only text minified ;) path: post.path }] 第二步，通过关键字，获取数据源中的匹配文章。这里我们将提供一个搜索函数search()，传入关键字，返回相匹配的文章列表。 function search(keywords){ // 关键字 => 正则，空格隔开的看作多个关键字 // a b c => /a|b|c/gmi var result = []; var regExp = new RegExp(key.replace(/[ ]/g, '|'), 'gmi'); loadData(function(data){ result = data.filter(function(post){ return matcher(post,regExp); }) }) } 定义数据源读取函数loadData() var searchData; function loadData(success) { if (!searchData) { var xhr = new XMLHttpRequest(); xhr.open('GET', '/content.json', true); xhr.onload = function() { if (this.status >= 200 &amp;&amp; this.status &lt; 300) { var res = JSON.parse(this.response || this.responseText); searchData = res instanceof Array ? res : res.posts; success(searchData); } else { console.error(this.statusText); } }; xhr.onerror = function() { console.error(this.statusText); }; xhr.send(); } else { success(searchData); } } 定义正则匹配函数 function matcher(post, regExp) { // 匹配优先级：title > tags > text return regtest(post.title, regExp) || post.tags.some(function(tag) { return regtest(tag.name, regExp); }) || regtest(post.text, regExp); } function regtest(raw, regExp) { regExp.lastIndex = 0; return regExp.test(raw); }"},{"title":"gallery","date":"2017-09-22T08:31:58.000Z","path":"2017/09/22/gallery/","text":""},{"title":"Hello World","date":"2013-07-14T09:01:34.000Z","path":"2013/07/14/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new \"My New Post\" More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment"}]