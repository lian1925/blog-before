[{"title":"豫卦 | 易经","date":"2017-10-12T06:05:28.000Z","path":"2017/10/12/yi-16-yu/","text":"《象》曰:雷出地奋,豫。先王以作乐崇德,殷荐之上帝,以配祖考。 《象》曰:初六,“鸣豫”,志穷凶也。 《象》曰:“不终日,贞吉”,以中正也。 《象》曰:“盱豫有悔”,位不当也。 《象》曰:“由豫,大有得”,志大行也。 《象》曰:六五“贞疾”,乘刚也;“恒不死”,中未亡也。 《象》曰:“冥豫”在上,何可长也?"},{"title":"谦卦 | 易经","date":"2017-10-12T05:46:18.000Z","path":"2017/10/12/yi-15-qian/","text":"《象》曰:地中有山,谦。君子以裒多益寡,称物平施。 《象》曰:“谦谦君子”,卑以自牧也。 《象》曰:“鸣谦,贞吉”,中心得也。 《象》曰:“劳谦君子”,万民服也。 《象》曰:“无不利,挥谦”,不违则也。 《象》曰:“利用侵伐”,征不服也。 《象》曰:“鸣谦”,志未得也;“可用行师”,征邑国也。"},{"title":"大有卦 | 易经","date":"2017-10-12T05:28:11.000Z","path":"2017/10/12/yi-14-dayou/","text":"《象》曰:火在天上,“大有”;君子以遏恶扬善,顺天休命。 《象》曰:大有初九,无交害也。 《象》曰:“大车以载”,积中不败也。 《象》曰:“公用亨于天子”,小人害也。 《象》是:“匪其彭,无咎”,明辨晢也。 《象》曰:“厥孚交加”,信以发志也;“威如之吉”,易而无备也。 《象》曰:《大有》上吉,自天佑也。"},{"title":"同人卦 | 易经","date":"2017-10-12T05:21:38.000Z","path":"2017/10/12/yi-13-tong/","text":"《象》曰:天与火,同人;君子以类族辨物。 《象》曰:出门同人,又谁咎也! 《象》曰:“同人于宗”,吝道也。 《象》曰:“伏戎于莽”,敌刚也;“三岁不兴”,安行也? 《象》曰:“乘其墉”,义弗克也,其“吉”,则困而反则也。 《象》曰:同人之先,以中直也;大师相遇,天罔极上遇,言相克也。 《象》曰:“同人于郊”,志未得也。"},{"title":"否卦 | 易经","date":"2017-10-12T05:13:49.000Z","path":"2017/10/12/yi-12-fou/","text":"《象》曰:天地不交,“否”;君子以俭德辟难,不可荣以禄。 《象》曰:“拔茅贞吉”,志在君也。 《象》曰:“大人否享”,不乱群也。 《象》曰:“包羞”,位不当也。 《象》曰:“有命无咎”,志行也。 《象》曰:“大人之吉”,位正当也。 《象》曰:否终则倾,何可长也!"},{"title":"泰卦 | 易经","date":"2017-10-12T04:45:33.000Z","path":"2017/10/12/yi-11-tai/","text":"《象》曰:天地交,泰;后以财成天地之道,辅相天地之宜,以左右民。 《象》曰:拔茅征吉,志在外也。 《象》曰:“包荒”,“得尚于中行”,以光在也。 《象》曰:“无往不复”,天地际也。 《象》曰:“翩翩不富”,皆失实也;“不戒以孚”,中心愿也。 《象》曰:“以祉元吉”,中以行愿也。 《象》曰:城复于隍,其命乱也。"},{"title":"履卦 | 易经","date":"2017-10-12T04:37:26.000Z","path":"2017/10/12/yi-10-lv/","text":"《象》曰:上天下泽,“履”;君子以辩上下,定民志。 《象》曰:“素履之往”,独行愿也。 《象》曰:“幽人贞吉”,中不自乱也。 《象》曰:“眇能视”,不足以有明也;“跛能履”,不足以与行也;“咥人之凶”,位不当 也;“武人为于大君”,志刚也。 《象》曰:“愬愬终吉”,志行也。 《象》曰:“夬履贞厉”,位正当也。 《象》曰:元吉在上,大有庆也。"},{"title":"小畜卦 | 易经","date":"2017-10-12T04:32:34.000Z","path":"2017/10/12/yi-9-xiaoxu/","text":"小畜:亨;密云不雨,自我西郊。 《象》曰:风行天上,“小畜”;君子以懿文德。 《象》曰:“复自道”,其义吉也。 《象》曰:牵复在中,亦不自失也。 《象》曰:夫妻反目,不能正室也。 《象》曰:“有孚惕出”,上合志也。 《象》曰:“有孚挛如”,不独富也。 《象》曰:“既雨既处”,德积载也;“君子征凶”,有所疑也。"},{"title":"扩展package | PXT","date":"2017-10-11T13:09:03.000Z","path":"2017/10/11/pxt-package-extends/","text":"ExtensionsA package may have an associated editor extension hosted in the Github Pages section of the repo. pxt-neoanim is an example of specialized NeoPixel animation editor. ConfigurationThe extension is configured in the pxt.json file by adding an extension field: { ... extension: {} } The editor will automatically add an “Editor” button for the extension in the package category. ProtocolThe editor and the extension IFrame communicate via a protocol of IFrame messages. messages have a unique id used to correlate response to requests. a response message can be requested. The id identifer can be used to correlate a receive response to the original query. all message sent by the extension must contain the extension id, extId. This identifier is passed when loading the IFrame (see Initialization) // sending message var msg = { id: Math.random().toString(), type: \"pxtpkgext\", action: \"extinit\", extId: extId, response: true } window.parent.postMessage(msg, \"*\"); // handle the response function receivedResponse(resp) { if (resp.action === \"extinit\") console.log('initialized!') } window.addEventListener(\"message\", function(ev) { var resp = ev.data; if (resp && resp.type === \"pxtpkgext\") receivedResponse(resp); }, false); InitializationWhen the user presses the extension button, The GitHub pages site is loaded in an IFrame with an extension id in the hashmark, e.g. https://microsoft.github.io/pxt-neoanim/#extid for the package https://github.com/Microsoft/pxt-neoanim. ~ hintStore the extension id as it needs to be used in every message. var extId = window.location.hash.substr(1); ~ Once fully loaded, the extension sends a extinit message to the parent window var msg = { id: Math.random().toString(), type: \"pxtpkgext\", action: \"extinit\", extId: extId } ... Read and write codeThe extension can read (extreadcode) and write (extwritecode) a dedicated TypeScript and JSON file in the project. The JSON file is designed to store rich metadata while the TypeScript is the “code behind” that gets executed. This feature does not require permissions. write code var msg = { id: Math.random().toString(), type: \"pxtpkgext\", action: \"extwritecode\", extId: extId, body: { code: \"// generated TypeScript code\", json: \"serialized JSON here\" } } ... read code var id = Math.random().toString(); var msg = { id: id, type: \"pxtpkgext\", action: \"extreadcode\", extId: extId, response: true } ... function receivedResponse(resp) { if (resp.action === \"extreadcode\" && resp.id === id && resp.body) { var ts = resp.body.code; var json = JSON.parse(resp.body.json); ... } } ... Read and write user codeThe extusercode message requests to read the entire set of files in the project. The user will be prompted to give permission. If successfull, the response contains a resp field with a map of the file names to file contents. export interface UserCodeResponse extends ExtensionResponse { /* A mapping of file names to their contents */ resp?: { [index: string]: string }; } Data streamsWhen available, the editor may stream data coming from the devices. The extdatastream message requests to stream data. The user will be prompted to give permission. The following message requests for serial messages: var msg { ... action: \"extdatastream\", body: { serial: true } } ... If successful, the editor will proxy serial messages to the editor IFrame."},{"title":"配置package | PXT","date":"2017-10-11T13:07:05.000Z","path":"2017/10/11/pxt-package-pxtjson/","text":"pxt.json Manual PageA PXT package lives in its own directory, locally under libs/ in a PXT target. A packageis described by the pxt.json file. Here is the pxt.json file for the pxt-neopixel package: https://github.com/Microsoft/pxt-neopixel The pxt.json is described by the interface PackageConfig: interface PackageConfig { name: string; // public:true -> name must match ^[a-z][a-z0-9\\-_]+ description?: string; // longer description of package license?: string; // name of license (as found on github) authors?: string[]; files: string[]; // files to be included and compiled in package additionalFilePath?: string; // another directory to find files from dependencies: Map; // package dependencies (see below for more) public?: boolean; // set true to enable the package to be published (to cloud), // in support of publishing user scripts icon?: string; // url to icon -- support for built-in packages only card?: CodeCard; documentation?: string; // doc page to open when loading project // semver description for support target version version?: string; installedVersion?: string; targetVersions?: TargetVersions; // versions of the target/pxt the package was compiled against testFiles?: string[]; simFiles?: string[]; binaryonly?: boolean; platformio?: PlatformIOConfig; yotta?: YottaConfig; gistId?: string; } dependencies (on other packages)Simple packages generally just depend on their target’s core package: \"dependencies\": { \"core\": \"file:../core\" } A number of targets use http://github.com/microsoft/pxt-common-packages and specializethem to fit their target’s needs. For example, the Adafruit Circuit Playground Expresspackage is the union of a number of packages. \"dependencies\": { \"core\": \"file:../core\", \"buttons\": \"file:../buttons\", \"accelerometer\": \"file:../accelerometer\", \"lightsensor\": \"file:../lightsensor\", \"thermometer\": \"file:../thermometer\", \"music\": \"file:../music\", \"light\": \"file:../light\", \"switch\": \"file:../switch\", \"infrared\": \"file:../infrared\", \"microphone\": \"file:../microphone\", \"touch\": \"file:../touch\" } Each of the above packages is local to the target but inherits code from microsoft/pxt-common-packages,which it can then override or specialize, as the target needs. For example, the button packagein the target microsoft/pxt-adafruit is defined in terms of the button package frommicrosoft/pxt-common-packages using the additionalFilePath field: { \"name\": \"buttons\", \"description\": \"Button A and B drivers\", \"files\": [ \"README.md\", \"buttons.cpp\", \"shims.d.ts\", \"enums.d.ts\" ], \"testFiles\": [ \"test.ts\" ], \"additionalFilePath\": \"../../node_modules/pxt-common-packages/libs/buttons\", \"public\": true, \"dependencies\": { \"core\": \"file:../core\" } } The additionalFilePath field refers to the node_modules directory of the target."},{"title":"package起步 | PXT","date":"2017-10-11T13:05:09.000Z","path":"2017/10/11/pxt-package-start/","text":"Building your own packageStep 0: Local server setupIn order to build and test your package locally, you need to setup PXT to run locally.Follow the instructions on setting up workspace. Step 1: GitHub setupYou will need to get a GitHub account and create a GitHub repository. At this time, other repository hosting solutions (GitLab, Bitbucket, etc.) are not supported. Let’s say you want to create a package called banana for target TARGET. create (do not clone) a fresh GitHub repository pxt-banana clone this repository into pxt-banana under the projects folder go to the cloned folder and run pxt init; follow the prompts edit pxt.json and README.md with the right descriptions commit files to git: git add ., and commit them: git commit -m &quot;Initial&quot; Make sure you keep the line for PXT/TARGET (where TARGET is the target id) in README.md. Otherwise the package will not show up in search. Step 2: Developing packageNow, you’re ready to develop your package. You can do it with VSCodeor from the web editor served from pxt serve. put the contents of your package in main.ts add a sample program using the package in test.ts use pxt to build and deploy the package with tests; use the web editor to test in the simulator You will develop your package in pxt-banana, and then test this work by creating a second project (called, perhaps, “Just Look At It”) which includes a reference to pxt-banana. ~ hintIf the local editor fails to open, copy the URL printed in the console and open it in your favorite browser. The local server requires a security token embedded in the URL to serve pages. ~Step 3: TestingIn order to test your package, you need to create a new project, and manually add a reference back to the package you’ve been developing. Open the local editor and create a new project. For example, you might call it Just Look At It. Open the project settings by clicking the gear (Gear -&gt; Project Settings) Click on Edit Settings As Text Add an entry under dependencies that points to your package folder: { &quot;name&quot;: &quot;banana test&quot;, &quot;dependencies&quot;: { ... &quot;banana&quot;: &quot;file:../pxt-banana&quot; }, ... } Reload the editor and the new blocks you developed in pxt-banana will be loaded into the project “Just Look At It.” Step 4: Publishing your packageWhen you’re happy with the first version of your package, commit the changes andbump the version and push to github: git commit -a -m &quot;Amazing flying bananas&quot; pxt bump The pxt bump will make sure there are no uncommited changes, bump the version number,create a git tag, and push everything to github. In the editor, paste the full URL to your repo after selecting More -&gt; Add package.... Your package should show up. Step 5: ApprovalIn order to be searchable by users, packages need to be approved. GitHub organizations or individual repos can be approved. See approval for more details. ~ hintMake sure you keep the line for PXT/TARGET (where TARGET is the target platform id)in README.md. Otherwise the package will not show up in search. ~Read more an defining-blocks to learn how to surface your APIs into blocks and JavaScript. IconThe editor will automatically use any icon.png file when displaying the package in the editor. This feature only works for approved packages. The icon should be sized with a 16:9 ratio and of at least 184 pixel wide."},{"title":"主题 | PXT","date":"2017-10-11T13:02:18.000Z","path":"2017/10/11/pxt-theme/","text":"ThemingPXT uses the Semantic UI framework to create the user interface. BlocklyTo Blockly themeing, you can overwrite the default Blockly options by configuring blocklyOptions under your target’s appTheme. See Blockly Configuration for a full list of Blockly configurable options. Semantic ThemingPXT comes with a default Semantic UI theme. You can however completely override the theme and use all the flexibility of Semantic UI to customize your target. copy the _theme folder from the project to the root of your target, and rename it to site customize the variables! You will most likely be updating the site variables under site/globals/site.variables From more information on themeing, visit http://semantic-ui.com/usage/theming.html pxt serve or pxt buildtarget will automatically rebuild semantic.css and override the built-in CSS from the app. FaviconUse realfavicongenerator to generate all the relevant favicon icon files and save them under static/icons in the docs folder. AppThemepxtarget.json contains an extensive customization section (appTheme) to control logos, names, colors, etc. Details are below (TBD): interface AppTheme { // naming id?: string; name?: string; title?: string; description?: string; boardName?: string; // associated social/store information appStoreID?: string; // Apple iTune Store ID if any twitter?: string; // localization defaultLocale?: string; locales?: Map&lt;AppTheme>; crowdinProject?: string; crowdinBranch?: string; // optional branch specification for pxt selectLanguage?: boolean; // add language picker to settings menu disableLiveTranslations?: boolean; // don't load translations from crowdin // logos logoUrl?: string; logo?: string; portraitLogo?: string; rightLogo?: string; docsLogo?: string; cardLogo?: string; appLogo?: string; // branding organization?: string; organizationUrl?: string; organizationLogo?: string; organizationWideLogo?: string; // associated URLs homeUrl?: string; shareUrl?: string; embedUrl?: string; betaUrl?: string; // beta tag and URL privacyUrl?: string; termsOfUseUrl?: string; contactUrl?: string; feedbackUrl?: string; // is set: a feedback link will show in the settings menu githubUrl?: string; legacyDomain?: string; // menu authoring and theming docMenu?: DocMenuEntry[]; // help menu TOC?: TOCMenuEntry[]; // see SUMMARY.md also galleries?: pxt.Map&lt;string>; // list of galleries to display in projects dialog hideMenuBar?: boolean; // Hides the main menu bar hideEditorToolbar?: boolean; // Hides the bottom editor toolbar // getting started and documentation sideDoc?: string; // if set: show the getting started button, clicking on getting started button links to that page hideSideDocs?: boolean; hideDocsSimulator?: boolean; // do not show simulator button in docs hideDocsEdit?: boolean; // do not show edit button in docs usbDocs?: string; htmlDocIncludes?: Map&lt;string>; htmlTemplates?: Map&lt;string>; // editor theming accentColor?: string; blocksOnly?: boolean; // blocks only workspace invertedMenu?: boolean; // if true: apply the inverted class to the menu // blockly theming blockColors?: Map&lt;string>; // block namespace colors, used for build in categories coloredToolbox?: boolean; // if true: color the blockly toolbox categories invertedToolbox?: boolean; // if true: use the blockly inverted toolbox blocklyOptions?: Blockly.Options; // Blockly options, see Configuration: https://developers.google.com/blockly/guides/get-started/web blockHats?: boolean; // if true, event blocks have hats // monaco theming invertedMonaco?: boolean; // if true: use the vs-dark monaco theme monacoToolbox?: boolean; // if true: show the monaco toolbox when in the monaco editor hasReferenceDocs?: boolean; // if true: the monaco editor will add an option in the context menu to load the reference docs // simulator theming simAnimationEnter?: string; // Simulator enter animation simAnimationExit?: string; // Simulator exit animation hasAudio?: boolean; // target uses the Audio manager. if true: a mute button is added to the simulator toolbar. highContrast?: boolean; // simulator has a high contrast mode // running in an iframe allowParentController?: boolean; // allow parent iframe to control editor extendEditor?: boolean; // whether a target specific editor.js is loaded // options around downloading a compiled file useUploadMessage?: boolean; // change \"Download\" text to \"Upload\" downloadIcon?: string; // which icon io use for download driveDisplayName?: string; // name of the drive as it shows in the explorer // miscellaneous hideEmbedEdit?: boolean; // hide the edit button in the embedded view hideCookieNotice?: boolean; // always hide cookie notice for targets that embed the editor in apps/chrome mobileSafariDownloadProtocol?: string; // custom protocol to be used on iOS sounds?: { tutorialStep?: string; tutorialNext?: string; dialogClick?: string; }, }"},{"title":"舵机串口 | PXT","date":"2017-10-11T12:58:04.000Z","path":"2017/10/11/pxt-serial/","text":"pxt-hidserial Manual Page@description Monitors serial output from certain boardsMonitors serial output from certain boards (in particular SAMD21 ones) pxt hidserial DescriptionWhen using Codal runtime, PXT sends data from serial.writeLine() and friendsover a custom USB HID protocol called HF2.The protocol supports a number of other features, including flashing and some debugging.HF2 works on all major operating systems (including Windows 7) without the needfor any drivers. pxt hidserial just dumps serial data to standard output. When using pxt serve and developingat http://localhost:3232, the HID serial is forwarded to the browser, so there is noneed to use pxt hidserial. Other useful HID command include pxt hidlist to list connected HID devicesand pxt hiddmesg to dump Codal debug buffer. PXT can also deploy over HID - thisis the default when using command line or pxt serve. See Alsopxt tool"},{"title":"静态HTML | PXT","date":"2017-10-11T12:53:27.000Z","path":"2017/10/11/pxt-static-pkg/","text":"pxt-staticpkg Manual Page@description Compiles PXT editor into static HTML filesPackages the target into static HTML pages pxt staticpkg [--route route] [--githubpages] [--output output] DescriptionCompiles the PXT editor into static HTML files that can be served without a server or integrated into an app. The resulting files are placed in built/packaged. Flags:route (optional)Routing path. If missing, defaults to local. The route will be injected into the all the paths in the application. githubpages (optional)Generate a web site compatiable with GitHub pages. output (optional)Directory for generated files. bump (option)Bump version number generating pages ~ hintThis directory is cleaned before starting the process. ~Deploying PXT with static filesRunning pxt staticpkg will create a number of files under built/packaged.You can use pxt serve -pkg or any other any web server. For example, you can use http-server for easy testing. npm install -g http-server http-server -c-1 built/packaged You can also run pxt staticpkg --route foo, which will create files under built/packaged/foothat assume they sit under /foo/ on the web server. If you do not specify anything,the files assume they sit right under /. To test it, run pxt serve -pkg and head tohttp://localhost:3232/foo/index.html. GitHub Pages supportGitHub provides you with free hosting for your project files. If you wish to publish your web site to GitHub pages, simply add --githubpages to the command. This will: create a fresh checkout in built/gh-pages if needed implicityly run pxt staticpkg --route repo-name copy files from built/packaged/repo-name to built/gh-pages add files to git, commit, and push You can then head to https://your-username.github.io/repo-name/."},{"title":"SHIM | PXT","date":"2017-10-11T12:51:29.000Z","path":"2017/10/11/pxt-shim/","text":"Auto-generation of library filesThe APIs visible to PXT user (as TypeScript functions/classes or blocks)expose behaviors defined in the C++ library files (in case of hardware targets)and also the JavaScript simulator (runtime environment).These are defined in TypeScript files (usually .d.ts) under /libs folderin the target definition. Let’s call these shim files. The definitions in shim files include JSDoc comments andannotations starting with //%. In particular, //% shim=foo::bar meansthat the current function should be mapped to the C++ function foo::barand also to the simulator function pxsim.foo.bar. PXT can generate shim files from either C++in case of hardware targets, or from the simulator sources.In both cases, PXT will copy over all JSDoc style comments and //% annotations,add shim=... annotation, and also map the type appropriately (for example, C++ int typeis mapped to number, and TypeScript RefAction to ()=&gt;void).We refer to the information copied as API meta-data. Auto-generation from C++In case of hardware targets, the API meta-data should be defined in C++, and not the simulator.This is mostly because debugging mismatches on the C++ side is much harder than on the JSside. The shims are generated per-package under /libs when building the target.The shims files are called shims.d.ts and enums.d.ts. Enums are generatedseparately, so that they can be &lt;referenced ...&gt; from simulator sources. Both files should be listed in &quot;files&quot; section of pxt.json, and we also recommendthey are checked into git. PXT implements a simple parser for a fragment of C++. This parser will not handleeverything you throw at it. In particular, it is line based and doesn’t takemulti-line comments (other than doc comments) very well. To comment out a piece of C++code use #if 0 .... #endif. The type mapping from C++ to TypeScript is quite limited.Checkout the microbit target for an example. Auto-generation from the simulatorThis should be used in case of software-only targets. The shim file is called sims.d.ts and is generated from /sim/*.ts while buildingthe target. The file will be generated in the &quot;corepkg&quot; of the target. In future, we mayallow splitting between packages. Similarly, to the C++ generation, sims.d.ts shouldbe included in pxt.json and checked in. Checkout the sample target for an example. functionAsync handlingA function (or method) named fooAsync will be exposed as foo. It is expectedto return a promise. This will generate //% promise annotation, which will letthe compiler know about this calling convention. Legacy async handlingThe simulator function can also get hold of a callback function using getResume()and then call the resulting function when the function is supposed to resume.You need to include the //% async annotation in that case. Simulator implementationsIf you’re adding your own C++ or assembly functions in packagesand you either cannot or don’t want to add a corresponding function to the simulator,you can provide a simulator-only implementation. For example: /** * Writes to the Bluetooth UART service buffer. */ //% blockId=bluetooth_uart_write block=\"bluetooth uart write %data\" blockGap=8 //% shim=bluetooth::uartWrite export function uartWrite(data: string): void { // dummy implementation for simulator console.log(\"UART Write: \" + data) } Notice the shim= annotation. In C++ you would have just this: namespace bluetooth { //% void uartWrite(StringData *data) { // ... } } When PXT sees a call to function annotated with shim=, it will always use theshim in the native compilation. In simulator compilation it will use the shim onlyif the function has no body or empty body. If you don’t want your simulator implementationto do anything, you can for example put a single return statement as the body. Indexed InstancesA typical pattern to expose pins on a device is something like follows: class DeviceIO { public: DevicePin pins[0]; //% indexedInstanceNS=pins indexedInstanceShim=pins::getPin //% DevicePin A0; //% DevicePin A1; ... }; namespace pins { DeviceIO io; //% DevicePin *getPin(int id) { // ... add range checking ... return &amp;io.pins[id]; } } namespace DevicePinMethods { //% blockId=device_get_digital_pin block=\"digital read|pin %name\" blockGap=8 //% blockNamespace=pins int digitalRead(DevicePin *name) { return name->getDigitalValue() } ... } This will result in the following declarations being generated: declare namespace pins { //% fixedInstance shim=pins::getPin(0) const A0: DevicePin; //% fixedInstance shim=pins::getPin(1) const A1: DevicePin; ... } declare interface DevicePin { //% blockId=device_get_digital_pin block=\"digital read|pin %name\" blockGap=8 //% blockNamespace=pins shim=DevicePinMethods::digitalRead digitalRead(): number; ... } The indexedInstanceShim generates the shim=...(no) annotations.They instruct the access to the variable (which is read-only) to becompiled as call the the specified function with the specific literalargument. The fixedInstance annotation is automatically generatedfor blocks. The namespace FooMethods is turned into an interface Foo. Theseare usually used to wrap native C++ classes that require no referencecounting. Thus, you also need to manually add the following TypeScript: interface DevicePin { // no methods needed, they come from C++ } If you don’t, the runtime will call method that do not exists andchaos will prevail (even though you might not see it at the beginning). You can also specify inheritance in such a declaration: interface AnalogPin extends DigitalPin {}"},{"title":"定义blocks | PXT","date":"2017-10-11T11:32:49.000Z","path":"2017/10/11/pxt-define-blocks/","text":"Defining blocksThis section describes how to annotate your PXT APIs to expose them in the Block Editor. All the //% annotations are found in TypeScript library files.They can optionally be auto-generated from C++ library files or from TypeScriptsimulator files. CategoryEach top-level javascript namespace is used to populate a category in the Block Editor toolbox. The name will automatically be capitalized in the toolbox. namespace basic { ... } You can also provide a JsDoc comment, color and weight for the namespace, as well as a friendly name (in Unicode).We strongly recommend carefully picking colors as it dramatically impactsthat appearance and readability of your blocks. All blocks within the same namespace have the same color so that users can find the category easily fromsamples. /** * Provides access to basic micro:bit functionality. */ //% color=190 weight=100 icon=\"\\uf1ec\" block=\"Basic Blocks\" namespace basic { icon icon Unicode character from the icon font to display. The Semantic UI icon set has been ported from Font Awesome (v4.5.6 at the time of writing), and a full list can be found at http://fontawesome.io/icons/ color should be included in a comment line starting with \\\\%. The color takes a hue value or a HTML color. To have a category appear under the “Advanced” section of the Block Editor toolbox, add the annotation advanced=true. BlocksAll exported functions with a block attribute will be available in the Block Editor. //% block export function showNumber(v: number, interval: number = 150): void { } If you need more control over the appearance of the block,you can specify the blockId and block parameters. //% blockId=device_show_number //% block=\"show|number %v\" export function showNumber(v: number, interval: number = 150): void { } blockId is a constant, unique id for the block. This id is serialized in block code so changing it will break your users. block contains the syntax to build the block structure (more below). Other optional attributes can also be used: blockExternalInputs= forces External Inputs rendering advanced=true causes this block to be placed under the parent category’s “More…” subcategory. Useful for hiding advanced or rarely-used blocks by default Block syntaxThe block attribute specifies how the parameters of the functionwill be organized to create the block. block = field, { &#39;|&#39; field } field := string | string `%` parameter [ `=` type ] parameter = string type = string each field is mapped to a field in the block editor the function parameter are mapped in order to %parameter argument. The loader automatically buildsa mapping between the block field names and the function names. the block will automatically switch to external inputs when enough parameters are detected A block type =type can be specified optionally for each parameter. It will be used to populate the shadow type. Supported typesThe following types are supported in function signatures that are meant to be exported: number (TypeScript) or int (C++) string (TypeScript) or StringData* (C++) enums (see below) custom classes that are also exported arrays of the above Callbacks with ParametersAPIs that take in a callback function will have that callback converted into a statement input.If the callback in the API is designed to take in parameters, the best way to map that patternto the blocks is by passing the callback a single parameter with a class type that containsall the other values. For example: export class ArgumentClass { argumentA: number; argumentB: string; } //% mutate=objectdestructuring //% mutateText=\"My Arguments\" //% mutateDefaults=\"argumentA;argumentA,argumentB\" // ... export function addSomeEventHandler((a: ArgumentClass) => void) { }; In the above example, setting mutate=objectdestructuring will cause this API to use Blockly “mutators”to let users change what parameters appear in the blocks. Each parameter will be given anoptional variable field in the block that defines a variable that can be used within the callback.The variable fields compile to object destructuring in the TypeScript code. For example: addSomeEventHandler(({argumentA, argumentB}) => { }) For an example of this pattern in action, see the radio.onDataPacketReceived block inthe microbit target. In some cases it can be useful to change the runtime behavior of the API based on the properties selected by theuser. To enable that behavior, create an enum with entries that have the same names as the argument object’sproperties and add an extra parameter taking in an enum array to the API. For example: export class ArgumentClass { argumentA: number; argumentB: string; } enum ArgNames { argumentA, argumentB } //% mutate=objectdestructuring //% mutateText=\"My Arguments\" //% mutateDefaults=\"argumentA;argumentA,argumentB\" //% mutatePropertyEnum=\"argNames\" // ... export function addSomeEventHandler(args: ArgNames[], (a: ArgumentClass) => void) { }; Note the mutatePropertyEnum attribute added to the comment annotations. The block for this API willlook the same as the previous example but the compiled code will also include the arguments passed: addSomeEventHandler([ArgNames.argumentA, ArgNames.argumentB], ({argumentA, argumentB}) => { }) The other attributes related to object destructuring mutators include: mutateText - defines the text that appears in the top block of the Blockly mutator dialog (the dialog that appears when you click the blue gear) mutateDefaults - defines the versions of this block that should appear in the toolbox. Block definitions are separated by semicolons and property names should be separated by commas EnumsEnum are supported and will automatically be represented by a dropdown in blocks. enum Button { A = 1, B = 2, //% blockId=\"ApB\" block=\"A+B\" AB = 3, } the initializer can be used to map the value the blockId attribute can be used to override the block id the block attribute can be used to override the rendered string Tip: dropdown for non-enum parametersIt’s possible to provide a drop-down for a parameter that is not an enum. It involves the following step: create an enum with desired drop down entryenum Delimiters { //% block=\"new line\" NewLine = 1, //% block=\",\" Comma = 2 } a function that takes the enum as parameter and returns the according value//% blockId=\"delimiter_conv\" block=\"%del\" export function delimiters(del : Delimiters) : string { switch(del) { case Delimiters.NewLine: return \"\\n\"; case Delimiters.Comma: return \",\"; ... } } use the enum conversion function block id (delimiter_conv) as the value in the block parameter of your function//% blockId=\"read_until\" block=\"read until %del=delimiter_conv\" export function readUntil(del: string) : string { ... } Docs and default valuesThe JSDoc comment is automatically used as the help for the block. /** * Scroll a number on the screen. If the number fits on the screen (i.e. is a single digit), do not scroll. * @param interval speed of scroll; eg: 150, 100, 200, -100 */ //% help=functions/show-number export function showNumber(value: number, interval: number = 150): void { } If @param annotation is available with an eg: section, the firstvalue is used as the shadow value. An optional help attribute can be used to point to an specific documentation path. If the parameter has a default value (interval in this case), it is not exposed in blocks. If you want to include minimum and maximum value range for a numeric parameter, you can use square brackets with the range [min-max] after the parameter name in the @param annotation. It is important to include the shadow value if you are using range @param power [0-7] a value in the range 0..7, where 0 is the lowest power and 7 is the highest. eg: 7 Objects and Instance methodsIt is possible to expose instance methods and object factories, either directlyor with a bit of flattening (which is recommended, as flat, C-style APIs map best to blocks). Direct//% class Message { ... //% blockId=\"message_get_text\" block=\"%this|text\" public getText() { ... } } when annotating an instance method, you need to specify the %this parameter in the block syntax definition. You will need to expose a factory method to create your objects as needed. For the example above, we add a function that creates the message: //% blockId=\"create_message\" block=\"create message|with %text\" export function createMessage(text: string) : Message { return new Message(text); } Auto-createIf object has a reasonable default constructor, and it is harmless to call thisconstructor even if the variable needs to be overwritten later, then it’s usefulto designate a parameter-less function as auto-create, like this: namespace images { export function emptyImage(width = 5, height = 5): Image { ... } } //% autoCreate=images.emptyImage class Image { ... } Now, when user adds a block referring to a method of Image, a globalvariable will be automatically introduced and initialized with images.emptyImage(). In cases when the default constructor has side effects (eg., configuring a pin),or if the default value is most often overridden,the autoCreate syntax should not be used. Fixed Instance SetIt is sometimes the case that there is only a fixed number of instancesof a given class. One example is object representing pins on an electronic board.It is possible to expose these instances in a manner similar to an enum: //% fixedInstances class DigitalPin { ... //% blockId=device_set_digital_pin block=\"digital write|pin %name|to %value\" //% blockNamespace=pins digitalWrite(value: number): void { ... } } namespace pins { //% fixedInstance let D0: DigitalPin; //% fixedInstance let D1: DigitalPin; } This will result in a block digital write pin [D0] to [0], where thefirst hold is a dropdown with D0 and D1, and the second hole is a regularinteger value. The variables D0 and D1 can have additional annotations(eg., block=&quot;D#0&quot;). Currently, only variables are supported with fixedInstance(let or const). Fixed instances also support inheritance. For example, consider adding the followingdeclarations. //% fixedInstances class AnalogPin extends DigitalPin { ... //% blockId=device_set_analog_pin block=\"analog write|pin %name|to %value\" //% blockNamespace=pins analogWrite(value: number): void { ... } } namespace pins { //% fixedInstance let A0: AnalogPin; } The analog write will have a single-option dropdown with A0, butthe optionals on digital write will be now D0, D1 and A0. Variables with fixedInstance annotations can be added anywhere, at the top-level,even in different libraries or namespaces. This feature is often used with indexedInstance* attributes. It is also possible to define the instances to be used in blocks in TypeScript,for example: namespace pins { //% fixedInstance whenUsed export const A7 = new AnalogPin(7); } The whenUsed annotation causes the variable to be only included in compilationwhen it is used, even though it is initialized with something that can possiblyhave side effects. This happens automatically when there is no initializer,or the initializer is a simple constant, but for function calls and constructorsyou have to include whenUsed. OrderingAll blocks have a default weight of 50 that is used to sort them in the UI with the highest weight showing up first. To tweak the ordering,simply annotate the function with the weight macro: //% weight=10 ... If given API is only for Blocks usage, and doesn’t make much sense in TypeScript(for example, because there are alternative TypeScript APIs), you can use //% hiddenflag to disable showing it in auto-completion. GroupingUse the blockGap macro to specify the distance to the next block in the toolbox. Combined with the weight parameter,this macro allows to definte groups of blocks. The default blockGap value is 8. //% blockGap=14 ... Testing your BlocksWe recommend to build your block APIs iteratively and try it out in the editor to get the “feel of it”.To do so, the ideal setup is: run your target locally using pxt serve keep a code editor with the TypeScript opened where you can edit the APIs refresh the browser and try out the changes on a dummy program. Interestingly, you can design your entire API without implementing it! Deprecating BlocksTo deprecate an existing API, you can add the deprecated attribute like so: //% deprecated=true This will cause the API to still be usable in TypeScript, but prevent the block from appearing in theBlockly toolbox. If a user tries to load a project that uses the old API, the project will still loadcorrectly as long as the TypeScript API is present. Any deprecated blocks in the project will appear inthe editor but not the toolbox. API design Tips and TricksA few tips gathered while designing various APIs for the Block Editor. Design for beginners: the block interface is for beginners. You’ll want to create a specific layer of C-like function for that purpose. Anything that snaps together will be tried by the user: your runtime should deal with invalid input with graceful degradation rather than abrupt crashes.Some users will try to snap anything together - get ready for it. OO is cumbersome in blocks: we recommend using a C-like APIs – just function – rather than OO classes. It maps better to blocks. Keep the number of blocks small: there’s only so much space in the toolbox. Be specific about each API you want to see in Blocks."},{"title":"配置pxtarget.json | PXT","date":"2017-10-11T11:31:04.000Z","path":"2017/10/11/pxt-pxtarget-json/","text":"pxtarget.json Manual PageA PXT target is described by a pxtarget.json JSON file.Here are two examples of pxtarget.json files, one simple and one more complex: https://github.com/Microsoft/pxt-sample/blob/master/pxtarget.json https://github.com/Microsoft/pxt-microbit/blob/master/pxtarget.json The JSON file pxtarget.json is described at the top-level by the interfaces TargetBundleand AppTarget, shown below.Fields labelled as “DERIVED” in the comments are populated by PXT from other sources,as indicated. All other fields below are user-supplied. Optional fields have a “?” after their name. All PXT targets also must supply an NPM package.jsonfile, which describes the versioning, dependency and resources required to build the target.You can find examples for pxt-sample and pxt-microbit here: https://github.com/Microsoft/pxt-sample/blob/master/package.json https://github.com/Microsoft/pxt-microbit/blob/master/package.json Here’s more about creating a target TargetBundleThe interface TargetBundle describes the PXT packages that come bundledwith the target (as opposed to being pulled from the web), as well as the semanticversion of the target: interface TargetBundle extends AppTarget { versions: TargetVersions; // DERIVED: defines the semantic versioning for the target bundleddirs: string[]; // packages to be bundled into web app (libs/*) } versions: TargetVersionsPXT uses semantic versioning of its targets and packages. The TargetVersionsinterface has two relevant fields that are populated as specified below: interface TargetVersions { target: string; // equal to version field in \"package.json\" pxt: string; // equal to version field in \"package.json\" or \"node_modules/pxt-core/package.json\" } bundleddirs: string[]A target can use many packages in addition to the required “corepkg”. Toensure that a package is bundled into the web app, you must include it in this list. Forexample in http://github.com/microsoft/pxt-microbit/blob/master, we see: \"bundleddirs\": [ \"libs/core\", \"libs/radio\", \"libs/devices\", \"libs/bluetooth\" ], This ensures that the above four packages are compiled/bundled into the web app and delivered on the initialdownload of the web app. Other packages for the micro:bit, such as http://github.com/microsoft/pxt-neopixelare not bundled and remain on github.com, where they are loaded as needed by the web app (usuallyvia an “add package” request by the end user). AppTargetMost of the user-defined fields for pxttarget.json are described by the interface AppTarget. interface AppTarget { id: string; // unique id: should match ^[a-z]+$; used in URLs and domain names name: string; // friendly name (spaces allowed) corepkg: string; // specifies the directory (under libs/) for target's core APIs // such libraries also are known as packages. See section below. compile: CompileTarget; // see sections below for description appTheme: AppTheme; // see sections below for description nickname?: string; // Friendly id (should match ^[a-zA-Z]+$); used when generating files, // folders, etc. defaults to id platformid?: string; // Used as search term in GitHub search for packages; defaults to id title?: string; // for HTML TITLE tag description?: string; // for HTML META Description cloud?: AppCloud; // see sections below for descriptions of the rest of the fields simulator?: AppSimulator; runtime?: RuntimeOptions; compileService?: TargetCompileService; } corepkg: stringA target must have a core package under the libs/ directorywhere the core APIs for the target reside.The core package should always be bundled with the web app, as shown below: \"corepkg\": \"core\", \"bundleddirs\": [ \"libs/core\" ] compile: CompileTargetPXT supports compilation to both JavaScript and ARM machine code (native). Web-only targetswill not need the native compilation path. interface CompileTarget { isNative: boolean; // false -> JavaScript compilation only, for simulator hasHex: boolean; // output binary file (implies isNative) nativeType?: string; // currently only \"thumb\", though there is a prototype for AVR // output file options useUF2?: boolean; // true -> output UF2 format (see https://github.com/Microsoft/uf2), false -> HEX file hexMimeType?: string; // Mime type for hex files driveName?: string; // how will the device appear when plugged in via MSD? deployDrives?: string; // partial name of drives where the HEX/UF2 file should be copied // code generation options floatingPoint?: boolean; // use floating point in JavaScript (default is 32-bit integers) taggedInts?: boolean; // true -> use tagged integers in native (implies floatingPoint) shortPointers?: boolean; // true -> 16 bit pointers flashCodeAlign?: number; // defaults to 1k page size flashChecksumAddr?: number; // where to store checksum of code // advanced debugging options boxDebug?: boolean; // generate debugging code for boxing jsRefCounting?: boolean;// generate debugging in JS for reference counting scheme openocdScript?: string; } appTheme: AppThemePXT has a large number of options for controllingthe look and feel of a target.Here is the appTheme from pxt-sample with some comments: \"appTheme\": { // URLs to use for various components of the UI \"logoUrl\": \"https://microsoft.github.io/pxt-sample/\", \"homeUrl\": \"https://microsoft.github.io/pxt-sample/\", \"privacyUrl\": \"https://go.microsoft.com/fwlink/?LinkId=521839\", \"termsOfUseUrl\": \"https://go.microsoft.com/fwlink/?LinkID=206977\", \"betaUrl\": \"https://makecode.com/\", // populating the (?) menu \"docMenu\": [ { \"name\": \"About\", \"path\": \"/about\" }, { \"name\": \"Docs\", \"path\": \"/docs\" } ], // enable toolbox for both Blockly and JavaScript \"coloredToolbox\": true, \"monacoToolbox\": true, \"invertedMenu\": true, \"simAnimationEnter\": \"rotate in\", \"simAnimationExit\": \"rotate out\" } cloud?: AppCloudPXT has a cloud backend that provides a set of services to the web app. The services are configured usingthe cloud field in pxttarget.json, defined by the AppCloud interface: interface AppCloud { sharing?: boolean; // enable anonymous sharing of projects via URL importing?: boolean; // enable import of a previously shared project from // a URL (requires sharing? and publishing?) packages?: boolean; // enabled loading of packages (from github) preferredPackages?: string[]; // list of company/project(#tag) of packages on github githubPackages?: boolean; // enable user-specified term for searching github for packages // to be retired soon publishing?: boolean; // must set true for importing? to work; no other purpose evident embedding?: boolean; // not currently supported workspaces?: boolean; } For example in the pxttarget.json for http://github.com/microsoft/pxt-microbit, we see: \"cloud\": { \"workspace\": false, \"packages\": true, \"sharing\": true, \"publishing\": true, \"preferredPackages\": [ \"Microsoft/pxt-neopixel\" ], \"githubPackages\": true } simulator?: AppSimulator;PXT provides a JavaScript-based simulation environment on the left side of the webapp (typically for physical computing devices like the micro:bit). PXT uses theterm board to refer to the main physical computing device shown in the simulator.Each target has one board (plus optional parts). interface AppSimulator { // define aspects of physical computing device boardDefinition?: BoardDefinition; // running and code changes autoRun?: boolean; // automatically run program after a change to its code stopOnChange?: boolean; // stop execution when user changes code headless?: boolean; // whether simulator should still run while collapsed // buttons and parts hideRestart?: boolean; // hide the restart button hideFullscreen?: boolean; // hide the fullscreen button enableTrace?: boolean; // enable the slow-mode (snail) button parts?: boolean; // parts enabled? instructions?: boolean; // generate step-by-step wiring instructions (Make button) // appearance aspectRatio?: number; // width / height partsAspectRatio?: number; // aspect ratio of the simulator when parts are displayed // miscellaneous trustedUrls?: string[]; // URLs that are allowed in simulator modal messages } runtime?: RuntimeOptions;This severely misnamed option controls the available blocks in the Blockly editor: interface RuntimeOptions { // control whether or not Blockly built-in categories appear mathBlocks?: boolean; textBlocks?: boolean; listsBlocks?: boolean; variablesBlocks?: boolean; logicBlocks?: boolean; loopsBlocks?: boolean; // options specific to the special \"on start\" block onStartNamespace?: string; // default = loops onStartColor?: string; onStartWeight?: number; onStartUnDeletable?: boolean; } compileService?: TargetCompileService;PXT provides a compile service for C/C++ code that may be included in a target/package.Currently, this compile service can be configuredto use either yottaor platformio.PXT defaults to using local installs of yotta and platformio.PXT expects to find the C/C++ sources on github. interface TargetCompileService { buildEngine?: string; // default is yotta, set to platformio // where are the sources githubCorePackage?: string; // e.g. lancaster-university/microbit gittag: string; // yotta configuration yottaCorePackage?: string; // name for PXT use yottaTarget?: string; // name of yotta target to build yottaBinary?: string; // name of yotta output file yottaConfig?: any; // additional config // platformio configuration platformioIni?: string[]; // define contents of platformio.ini file serviceId: string; }"},{"title":"编译 | PXT","date":"2017-10-11T10:39:58.000Z","path":"2017/10/11/pxt-target/","text":"Target CreationPXT can be customized to create your own target, with your own set of APIs and runtime,supported by Block-based and JavaScript editing. Examples of targets are: https://makecode.microbit.org (sources at https://github.com/microsoft/pxt-microbit) http://microsoft.github.io/pxt-sample/ (sources at https://github.com/microsoft/pxt-sample) We assume that the reader is familiar with Node.JS, NPM, JavaScript and/or C++. If you haven’t done so yet,install Node.JS and the PXT command line npm install -g pxt Get a copy of the sample target sources and open it in your favorite editor. Open a command prompt in the target folder and run these commands to setup the tools. npm install At this point, pick an identifier for your target. Use only alphabetic characters as it will be used in various routing operations. StructureA target occupies a directory with a pxtarget.json file and the following folders: /libs, packages (sometimes referred to as libraries) that define the APIs (in C++, Static TypeScript or Thumb assembler) and how they should be exposed in blocks /sim, TypeScript source for the in-browser simulator, if any /docs, markdown documentation pages Updating pxtarget.json如：{ id: “ID:utseb”, name: “名称：utseb”, title: “标题：utseb”}The pxtarget.json file contains the configuration options of your target.For now, update the id, name and title fields to reflect your target information. Tip: keep searching and replacing all instances of sample in pxtarget.json. Updating package.jsonYour target will eventually have to be published to NPM,so go ahead and update the package.json file with your target id,repositories locations, etc. it might be a good time to check that your target id is available in NPM as well. Updating assetsGraphical assets are located under /docs/static. avatar.svg image used in talking heads loader.svg image used in loading overlay Updating the core packageThe libs/core package of pxt-sample defines a minimal package structure. In fact, the APIs of pxt-sample live in the sim/api.ts (annotated to exposeTypeScript functions as blocks), as this target is onlyfor the web. The PXT compiler generatesthe file libs/core/sim.d.ts from the simulator code. See creating a PXT packagefor more information on authoring packages, which includes codein the package itself.For now, you can try adding a new API to one of the existing namespacesinsim/api.ts with annotations to make a new block. Updating the templates projectsTemplates are the default projects for your target.There is one default blocks project, and one default JavaScript project.The initial templates are empty projects.To change the default project, modify the package under libs/blocksprj Testing the target locallyNow that you’ve updated your target, it is ready to be run locally. Run the following command: pxt serve The editor will automatically open the target API project which you can edit directly in PXT.At this point, we recommend to create a new project using blocks that will serve as a sandbox.New projects are created under the /projects folder when testing a target locally (and are automatically “git-ignored”). You can use these projects to change your templates. Simply copy the contents of your project under /projects to one of the templates under /libs/templates/. Whenever you make a change, the local web server will trigger a build. Simply reload the page once the build is done. Defining APIs and BlocksThe APIs available in the PXT environment are loaded from TypeScript package (library) files(the ones under /libs).They can optionally be auto-generated from C++ library files or from TypeScriptsimulator files. Read more about how to annotate your APIS to expose them as blocks in PXT. Path rewritingWhen uploading to PXT cloud URLs of various files are rewritten to ones pointing to the CDN.There are three kinds of URLs on the CDN: /blob/&lt;blob_hash&gt;/some/path/filename.ext - where the path and file name can be arbitrary /commit/&lt;commit_hash&gt;/path/in/that/commit/filename.ext - where the path actually comes from the commit /tree/&lt;tree_hash&gt;/path/in/that/tree/filename.ext - where the path actually comes from the tree Whenever possible, /blob/ URLs should be used, since they only change when the file changes.This allows for faster app updates. For an example, compare https://makecode.microbit.org/---manifestand https://github.com/Microsoft/pxt/blob/master/webapp/public/release.manifest Generally, PXT will rewrite URLs starting with /cdn/ to /commit/... and ones startingwith /blb/ to /blob/.... This happens in manifest and HTML files, as well as some JavaScriptfiles (web worker sources and embed.js). Part of that rewriting happens client-side when uploading(strings like @commitCdnUrl@ and @blobCdnUrl@ are introduced), and part happens in the cloud. Currently, in simulator files only, all of /cdn/, /sim/ and /blb/ are rewrittento /blob/.... Going forward however, simulator files should use /blb/ explicitlyto make the intent clear. The main reason to use /cdn/ instead of /blb/ is when resources require relative paths.This is for example the case for Blockly media files. The /tree/... URLs are not yet supported in rewriting."},{"title":"异步 | PXT","date":"2017-10-11T10:04:51.000Z","path":"2017/10/11/pxt-async/","text":"异步与线程背景知识JavaScript is generally speaking single threaded (there are web workers and other such inventions, but these are generally considered separate processes, that share no address space with the main process). If a function needs to wait forsome input (e.g., web request), you need to supply a callback function that getsexecuted when the data is available. downloadData(\"https://example.com/\", (err, data) => { if (err) { ... } else { let parsed = JSON.parse(data) ... } }) This becomes somewhat problematic when you start to nest these.A simple web search on “callback hell” will tell why. One way to fix this is to use promises, but the idearemains the same — in the .then() handler you provide the function to executewhen data is available, but the advantage is that you can often avoid nestingthem (functions returning promises are often by convention called somethingAsync): downloadDataAsync(\"https://example.com/\") .then(data => { let parsed = JSON.parse(data) ... }, err => { ... }) .then(() => downloadDataAsync(\"https://somewhere-else.com/\")) .then(somewhere => ...) There are proposals of introducing C#-style async/await to JavaScript.In fact TypeScript can compile async/await to ES6 generators (yield).In that case you can use await operator to make a call to a promise-returningfunction look sequential: let parsed = JSON.parse(await downloadDataAsync(\"https://example.com/\")) ... let somewhere = await downloadDataAsync(\"https://somewhere-else.com/\") ... Needless to say, this is way more readable and easier to get right thanthe previous two solutions. In fact, it lets you simulatecooperative multithreading — you think you have multiple threads,but only one of them runs at any given time, and you can be sureyour thread will not get interrupted until the point where it uses await. Promise? Await? And what is that for loop thing again?Now, all of this is great, but not really something you want to explainto someone who’s just trying to learn what a for loop is. For this reason, PXT lets users call async functions, as if they wereregular functions. This loses information about where your thread canbe interrupted, but we can hopefully recover that in the IDE (by for exampledisplaying a little clock next to async calls). let parsed = JSON.parse(downloadData(\"https://example.com/\")) ... let somewhere = downloadData(\"https://somewhere-else.com/\") ... Supporting async functions this way is one of the main reasons why we haveour own compilation scheme from TypeScript to JavaScript (cross-browserdebugger is another major one). Implementing async functionsCurrently, to implement an async function, you first need to add //% promiseattribute to the declaration: //? Downloads data from remote site. //% promise shim=basic::downloadData export function downloadData(url:string) { return \"\" } In the simulator you return a promise: export function downloadDataAsync(url:string) { return new Promise((resolve, reject) => $.get(url, (data, status) => { resolve(data) })) } It is also possible to use //% async and use getResume() functionto get a callback. You can see some older code do that. Note, that you can generate TypeScript definition from thesimulator files, which will take care of the //% promise and //% shim=... annotations."},{"title":"JavaScript编辑器特性 | PXT","date":"2017-10-11T09:28:35.000Z","path":"2017/10/11/pxt-editor/","text":"Features of the JavaScript EditorThe JavaScript editor extends the features and functionality of the Monaco Editor, the editor that powers Visual Studio Code.Here is a list of some of the features supported by the Editor: EditingThe Editor contains a built-in JavaScript/Typescript language service that provides complete code intelligence. ColoringThe Editor automatically colors each of function and its respective namespace to match the colors of the respective block in the Block Editor. This is the equivalent of the following blocks: Auto SuggestAlso known as IntelliSense, the editor supports automatic word completion. If the language service knows possible completions, the IntelliSense suggestions will pop up as you type. You can always manually trigger it with Ctrl and Space. You can get additional information if you click the ‘i’ symbol in the current suggestion. Auto completionPressing Enter to any of the functions suggested by IntelliSense will automatically insert a snippet of the function declaration prefilling default values for each of the function parameters. The default value is populated in one of the following ways: The default value in a @param JSdoc in the function declaration. Default values for primitive types. number: 0, string: &quot;&quot;, boolean: false If a parameter is an Enum, the first value of the Enum is inserted Parameter HintsParameter hints will pop up as you’re typing a function invocation. Quick InfoHovering over namespaces, functions and function parameters will show useful information describing the purposes of the function, namespace, or parameter. Bracket MatchingMatching brackets are highlighted as soon as the cursor is near one of them. Tip: You can jump to the matching bracket with Ctrl and Shift and \\ ErrorsThe Editor’s language service is constantly analyzing your code for errors in the background.Errors are surfaced to the user in one of two different ways: Red squiggly or wavy lines appear beneath your code that is incorrect An Error bar snaps to the first error in the list ZoomYou can change the editor’s font size by zooming in or out the editor content.Use Ctrl and + and Ctrl and - to zoom in/out. Find and ReplaceThe Editor supports Find, as well as Find and Replace in order to search for a particular keyword, or search and replace a particular keyword.You can get to the Find and Replace widget with Ctrl and f, or you can also get to it via the All Commands window (see below). Context MenuRight clicking anywhere within the editor will bring up the context menu.The context menu will show you quick actions that you can complete by clicking one of the buttons that appear in the context menu. Here are some of the actions currently supported: Format Code: Quickly formats the document code Show Commands: Opens up the All Commands view Save: Saves the document Run Simulator: Runs the simulator All CommandsThe All Commands view allows the user to search through all the commands available in the editor.To get to the all commands view press F1, or right click to bring up the context menu, then click Show Commands. Language SupportThe Monaco editor is also used for displaying other languages, including JSON, Cpp, Text and Assembly files."},{"title":"关于 | PXT","date":"2017-10-11T09:00:14.000Z","path":"2017/10/11/pxt-makecode-about/","text":"目标：Microsoft Makecode是一个开源框架， 旨在为计算机科学教育提供帮助。makecode 侧重于user-facing编辑器的开发，底层开发语言是TypScript的子集。 特性：Google Blockly 块状，拖拽编程。Monaco Editor web版本的编辑器an ARM Thumb machine code emitter"},{"title":"博客添加统计功能","date":"2017-10-11T08:57:32.000Z","path":"2017/10/11/blog-count-feature/","text":""},{"title":"比卦 | 易经","date":"2017-10-10T12:37:38.000Z","path":"2017/10/10/yi-8-bi/","text":"比:吉。原筮,元永贞,无咎。不宁方来,后夫凶。《象》曰:地上有水,比;先王以建万国,亲诸侯。 初六,有孚比之,无咎;有孚盈缶,终来有它,吉。《象》曰:《比》之初六,有它吉也。 六二,比之自内,贞吉。《象》曰:“比之自内”,不自失也。 六三,比之匪人。《象》曰“比之匪人”,不亦伤乎? 六四,外比之,贞吉。《象》曰:外比于贤,以从上也。 九五,显比;王用三驱,失前禽,邑人不诫,吉。《象》曰:“显比”之吉,位正中也,舍逆取顺,失前禽也;邑人不诫,上使中也。 上六,比之无首,凶。《象》曰:“比之无首”,无所终也。"},{"title":"师卦 | 易经","date":"2017-10-10T12:31:20.000Z","path":"2017/10/10/yi-7-shi/","text":"师:贞,丈人吉,无咎。《象》曰:地中有水,师;君子以容民畜众。 初六,师出以律,否臧凶。《象》曰:“师出以律”,失律凶也。 九二,在师,中吉,无咎;王三锡命。《象》曰:“在师中吉”,承天宠也;“王三锡命”,怀万邦也。 六三,师或舆尸,凶。《象》曰:“师或舆尸”,大无功也。 六四,师左次,无咎。《象》曰:“左次无咎”,示失常也。 六五,田有禽,利执言,无咎;长子帅师,弟子舆尸,贞凶。《象》曰:“长子帅师”,以中行也;“弟子舆尸”,使不当也。 上六,大君有命,开国承家,小人勿用。《象》曰:“大君有命”,以正功也;“小人勿用”,必乱邦也。"},{"title":"讼卦 | 易经","date":"2017-10-10T12:24:18.000Z","path":"2017/10/10/yi-6-song/","text":"讼:有孚窒惕,中吉;终凶,利见大人,不利涉大川。《象》曰:天与水违行,讼;君子以作事谋始。 初六,不永所事;小有言,终吉。《象》曰:“不永所事”,讼不可长也;虽“小有言”,其辩明也。 九二,不克讼,归而逋,其邑人三百户,无眚。《象》曰:“不克讼,归逋窜也”;自下讼上,患至掇也。 六三,食旧德,贞厉,终吉;或从王事,无成。《象》曰“食旧德”,从上吉也。 九四,不克讼;复即命,渝,安贞吉。《象》曰:“复即命,渝”,安贞不失也。 九五,讼,元吉。《象》曰:“讼,元吉”,以中正也。 上九,或锡之鞶带,终朝三褫之。《象》曰:以讼受服,亦不足敬也。"},{"title":"需卦 | 易经","date":"2017-10-10T12:12:21.000Z","path":"2017/10/10/yi-5-xu/","text":"需:有孚,光亨,贞吉,利涉大川。《象》曰:云上于天,需;君子以饮食宴乐。 初九,需于郊,利用恒,无咎。《象》曰:“需于郊”,不犯难行也;“利用恒,无咎”,未失常也。 九二,需于沙,小有言,终吉。《象》曰:“需于沙”,衍在中也;虽有小言,以终吉也。 九三,需于泥,致寇至。《象》曰:“需于泥”,灾在外也;自我致寇,敬慎不败也。 六四,需于血,出自穴。《象》曰:“需于血”,顺以听也。 九五,需于酒食,贞吉。《象》曰:“酒食贞吉”,以中正也。 上六,入于穴,有不速之客三人来;敬之,终吉。《象》曰:“不速之客来,敬之终吉”。虽不当位,未大失也。"},{"title":"蒙卦 | 易经","date":"2017-10-10T11:55:54.000Z","path":"2017/10/10/yi-4-meng/","text":"(山水)蒙:亨。匪我求童蒙,童蒙求我;初筮告,再三渎,渎则不告。利贞。《象》曰:山下出泉,蒙;君子以果行育德。 初六,发蒙,利用刑人,用说桎梏;以往吝。《象》曰:利用刑人,以正法也。 九二,包蒙,吉。纳妇,吉;子克家。《象》曰:“子克家”,刚柔接也。 六三,勿用取女,见金夫,不有躬,无攸利。《象》曰:“勿用取女”,行不顺也。 六四,困蒙,吝。《象》曰:“困蒙之吝”,独远实也。 六五,童蒙,吉。《象》曰:“童蒙之吉”,顺以巽也。 上九,击蒙,不利为寇,利御寇。《象》曰:“利用御寇”,上下顺也。"},{"title":"屯卦 | 易经","date":"2017-10-10T11:43:58.000Z","path":"2017/10/10/yi-3-tun/","text":"屯:元,亨,利,贞;勿用有攸往,利建侯。《象》曰:云雷屯,君子以经纶。 初九,磐桓,利居贞,利建侯。《象》曰:虽磐桓,志行正也。以贵下贱,大得民也。 六二,屯如邅如,乘马班如。匪寇婚媾,女子贞不字,十年乃字。《象》曰:六二之难,乘刚也。“十年乃字”,反常也。 六三,即鹿无虞,惟入于林中,君子几,不如舍,往吝。《象》曰:“即鹿无虞”,以从禽也。君子舍之,往吝穷也。 六四,乘马班如,求婚媾,往吉,无不利。《象》曰:求而往,明也。 九五,屯其膏,小贞吉,大贞凶。《象》曰:“屯其膏”,施未光也。 上六,乘马班如,泣血涟如。《象》曰:“泣血涟如”,何可长也?"},{"title":"坤卦 | 易经","date":"2017-10-10T11:03:58.000Z","path":"2017/10/10/yi-2-kun/","text":"坤：元，亨，利牝马之贞。君子有攸往，先迷，后得主，利。西南得朋，东北丧朋。安贞吉。象曰：地势坤，君子以厚德载物。 初六，履霜，坚冰至。象曰：履霜坚冰，阴始凝也；驯致其道，至坚冰也。 六二，直方大，不习无不利。象曰：六二之动，直以方也，不习无不利，地道光也。 六三,含章可贞,或从王事,无成有终。《象》曰:“含章可贞”,以时发也;“或从王事”,知光大也。 六四,括囊,无咎无誉。《象》曰:“括囊无咎”,慎不害也。 六五,黄裳,元吉。《象》曰:“黄裳元吉”,文在中也。 上六,龙战于野,其血玄黄。《象》曰:“龙战于野”,其道穷也。 用六,利永贞。《象》曰:用六“永贞”,以大终也。"},{"title":"乾卦 | 易经","date":"2017-10-10T07:55:26.000Z","path":"2017/10/10/yi-1-qian/","text":"乾：元，亨，利，贞。象曰：天行健，君子以自强不息。 初九，潜龙勿用。象曰：潜龙勿用，阳在下也。 九二，见龙在田，利见大人。象曰：见龙在田，德施普也。 九三，君子终日乾乾，夕惜若，厉无咎。象曰：终日乾乾，反复道也。 九四，或跃在渊，无咎。象曰：或跃在渊，进无咎也。 九五，飞龙在天，利见大人。象曰：飞龙在天，大人造也。 上九，亢龙有悔。象曰：亢龙有悔，盈不可久也。 用九，见群龙无首，吉。象曰：用九，天德不可为首也。"},{"title":"初学 | 易经","date":"2017-10-10T07:12:45.000Z","path":"2017/10/10/yi-start/","text":"初步学习易经，记录要点与心得。易经，包括’经’与’传’两部分。‘经’包括六十四卦和三百八十四爻，及其说明(卦辞与爻辞)。‘传’，又称’十翼’，为孔子所作。 先天八卦“天地定位，山泽通气，雷风相薄，水火不相射，八卦想错。数往者顺，知来者逆，是故易逆数也”《说卦第二章》 后天八卦“帝出乎震，齐乎巽，相见乎离，致役乎坤，说言乎兑，战乎乾，劳乎坎，成言乎艮”《说卦第五章》 六十四卦由八经卦互组而成，爻从最低到最上，称”初，二，三，四，五，上”。另外，最顶两爻代表天，中间两爻代表人，最低两爻代表地。"},{"title":"Linux安装Git环境","date":"2017-10-09T07:43:41.000Z","path":"2017/10/09/linux-git-env/","text":"目标：为Linux服务器安装Git环境，配置安全协议SSH安装Git sudo apt-get update sudo apt-get install git 查看版本，检测是否安装成功 git --version 生成SSH KEY，默认安装(若有选择，按回车继续) ssh-keygen -t rsa -b 4096 -C lian1925@126.com 启动 ssh-agent: eval $(ssh-agent -s) 为 ssh-agent 添加 SSH key ssh-add ~/.ssh/id_rsa 获取 SSH KEY内容，填写到GitLab账号 $ pbcopy &lt; ~/.ssh/id_rsa.pub # Copies the contents of the id_rsa.pub file to your clipboard"},{"title":"Linux安装NodeJS环境","date":"2017-10-09T06:07:48.000Z","path":"2017/10/09/linux-node-env/","text":"目标：为Linux(Ubuntu)服务器，安装nodejs环境，用于运行JavaScript。安装nvm curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.5/install.sh | bash 查看当前已安装哪些node版本 nvm ls 安装node nvm install v6.10.1 查看版本，测试是否安装成功 node -v npm -v 安装部署工具PM2 npm i -g pm2"},{"title":"Linux下处理MySQL错误","date":"2017-10-09T04:29:11.000Z","path":"2017/10/09/linux-mysql-error/","text":"目标：在Linux服务器部署，运行程序，对外提供服务时，MySQL数据库会遇到一些问题，现将实践遇到的问题及解决思路记录。1 mysqladmin flush-hosts 错误当后端程序试图连接MySQL，出现错误提示如下： root@iZwz92o5ndq3w3w5buade0Z:/home/helloExpress# node api.js 2017-10-09 12:23:29 api start. port:8080 (node:2888) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 1): Error: Host '120.25.192.73' is blocked because of many connection errors; unblock with 'mysqladmin flush-hosts' (node:2888) DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code. events.js:163 throw er; // Unhandled 'error' event ^ Error: Connection lost: The server closed the connection. at Socket.&lt;anonymous> (/home/helloExpress/node_modules/mysql2/lib/connection.js:111:35) at emitNone (events.js:91:20) at Socket.emit (events.js:188:7) at endReadableNT (_stream_readable.js:975:12) at _combinedTickCallback (internal/process/next_tick.js:80:11) at process._tickCallback (internal/process/next_tick.js:104:9) 解决方案停止MySQL的运行： sudo /etc/init.d/mysql stop 以安全模式进入： sudo mysqld_safe --skip-grant-tables &amp; 进入MySQL： mysql -uroot -p 显示当前最大错误连接数： show variables like '%max_connections%'; 修改连接数值 SET GLOBAL max_connect_errors=10000; 退出MySQL exit 重新安装mysql2 library npm i mysql2"},{"title":"书单","date":"2017-10-05T15:19:08.000Z","path":"2017/10/05/reading-list/","text":"宁静庭落，一方书桌，一缕清风，一杯淡茶，手捧一卷书，闲坐一傍晚，何其美哉。好书于我更甚美味佳肴，特将喜爱之书梳理纪念。 21天搞定电影剧本 美食祈祷恋爱 你的剧本逊毙了 深入理解计算机系统 太极拳体用全书 万物解释者 研究是一门艺术 富爸爸穷爸爸 别闹了，费曼先生 程序员的自我修养 代码大全 故事：材质、结构、风格和银幕剧作的原理 关键冲突：如何把人际关系危机转化为合作共赢 关键对话：如何高效沟通 影响力 哈佛非虚构写作课 解忧杂货店 经济史的趣味 奇特的一生 围城 人月神话 山海经 嫌疑人X的献身 小岛经济学 小王子 小说课:折磨读者的秘密 演讲的力量 一本小小的红色写作书 一本小小的蓝色逻辑书 JavaScript权威指南 JavaScript高级程序设计"},{"title":"博客添加评论功能","date":"2017-10-05T11:28:01.000Z","path":"2017/10/05/blog-comments-feature/","text":"目标：为博客添加评论功能，方便访客留言。 工具畅言，使用微信账号登录。 备案使用畅言评论，需要对域名进行备案。故于阿里云新买域名www.liangyl.top，进行绑定 企业邮箱腾讯免费企业邮箱，使用微信登录 在页面的合适位置引入评论代码此处需要填写id和key，在畅言的管理后台获取。 &lt;div id=\"SOHUCS\">&lt;/div> &lt;script type=\"text/javascript\"> (function(){ var appid = '您的appid'; var conf = '您的appkey'; var width = window.innerWidth || document.documentElement.clientWidth; if (width &lt; 960) { window.document.write('&lt;script id=\"changyan_mobile_js\" charset=\"utf-8\" type=\"text/javascript\" src=\"http://changyan.sohu.com/upload/mobile/wap-js/changyan_mobile.js?client_id=' + appid + '&amp;conf=' + conf + '\">&lt;\\/script>'); } else { var loadJs=function(d,a){var c=document.getElementsByTagName(\"head\")[0]||document.head||document.documentElement;var b=document.createElement(\"script\");b.setAttribute(\"type\",\"text/javascript\");b.setAttribute(\"charset\",\"UTF-8\");b.setAttribute(\"src\",d);if(typeof a===\"function\"){if(window.attachEvent){b.onreadystatechange=function(){var e=b.readyState;if(e===\"loaded\"||e===\"complete\"){b.onreadystatechange=null;a()}}}else{b.onload=a}}c.appendChild(b)};loadJs(\"http://changyan.sohu.com/upload/changyan.js\",function(){window.changyan.api.config({appid:appid,conf:conf})}); } })(); &lt;/script> 图片"},{"title":"博客添加图标样式","date":"2017-10-05T06:16:02.000Z","path":"2017/10/05/blog-icon-style/","text":"目标：为博客添加好看的图标样式，提示阅读体验。 图标库阿里巴巴矢量图标库,可以使用GitHub账号登录 第一步，在图标库中搜索所需的图标第二步，将选好的图标加入项目，如:blog第三步，在HTML和css文件中引用 获取项目生成的css文件链接，加入html文件的头部&lt;link rel=\"stylesheet\" href=\"//at.alicdn.com/t/font_407924_kx6yx3r9q4m6xbt9.css\"> 选择所需的图标，获取其class名字，应用于页面&lt;i class=\"iconfont icon-sousuo\">&lt;/i> blog项目图标参考搜索icon-sousuo微博icon-weibogithubicon-githubtwittericon-twitterfacebookicon-facebook斜线icon-xiexian1双箭头icon-shuangjiantou-copy"},{"title":"Nginx 502 错误","date":"2017-10-05T04:15:03.000Z","path":"2017/10/05/nginx-502-error/","text":"最近，部署于阿里云的服务接口，用户请求数据时遭遇502错误的困扰。本文用于记录解决该问题的经过。查看Nginx的错误日志error.log，记录如下：片段1 2017/10/05 11:50:51 [error] 6430#0: *1815 upstream prematurely closed connection while reading response header from upstream, client: 116.25.250.1, server: , request: \"POST /educate/user/course_submit_list HTTP/1.1\", upstream: \"http://127.0.0.1:8080/educate/user/course_submit_list\", host: \"www.luobocode.com\", referrer: \"https://servicewechat.com/wx2ef86638fe2ab2eb/devtools/page-frame.html\" 2017/10/05 11:50:51 [error] 6430#0: *1809 upstream prematurely closed connection while reading response header from upstream, client: 116.25.250.1, server: , request: \"POST /educate/user/submit_check HTTP/1.1\", upstream: \"http://127.0.0.1:8080/educate/user/submit_check\", host: \"www.luobocode.com\", referrer: \"https://servicewechat.com/wx2ef86638fe2ab2eb/devtools/page-frame.html\" 2017/10/05 11:50:51 [error] 6430#0: *1816 upstream prematurely closed connection while reading response header from upstream, client: 116.25.250.1, server: , request: \"POST /educate/auth/check_manager HTTP/1.1\", upstream: \"http://127.0.0.1:8080/educate/auth/check_manager\", host: \"www.luobocode.com\", referrer: \"https://servicewechat.com/wx2ef86638fe2ab2eb/devtools/page-frame.html\" 2017/10/05 11:50:51 [error] 6430#0: *1807 upstream prematurely closed connection while reading response header from upstream, client: 116.25.250.1, server: , request: \"POST /educate/user/subscribe_state HTTP/1.1\", upstream: \"http://127.0.0.1:8080/educate/user/subscribe_state\", host: \"www.luobocode.com\", referrer: \"https://servicewechat.com/wx2ef86638fe2ab2eb/devtools/page-frame.html\" 片段2 2017/10/05 09:44:51 [error] 6430#0: *1084 upstream prematurely closed connection while reading response header from upstream, client: 116.25.250.1, server: , request: \"POST /educate/user/submit_check HTTP/1.1\", upstream: \"http://127.0.0.1:8080/educate/user/submit_check\", host: \"www.luobocode.com\", referrer: \"https://servicewechat.com/wx2ef86638fe2ab2eb/devtools/page-frame.html\" 2017/10/05 09:44:51 [error] 6430#0: *1083 upstream prematurely closed connection while reading response header from upstream, client: 116.25.250.1, server: , request: \"POST /educate/auth/check_manager HTTP/1.1\", upstream: \"http://127.0.0.1:8080/educate/auth/check_manager\", host: \"www.luobocode.com\", referrer: \"https://servicewechat.com/wx2ef86638fe2ab2eb/devtools/page-frame.html\" 2017/10/05 09:44:51 [error] 6430#0: *1064 recv() failed (104: Connection reset by peer) while reading response header from upstream, client: 116.25.250.1, server: , request: \"POST /educate/user/subscribe_state HTTP/1.1\", upstream: \"http://127.0.0.1:8080/educate/user/subscribe_state\", host: \"www.luobocode.com\", referrer: \"https://servicewechat.com/wx2ef86638fe2ab2eb/devtools/page-frame.html\" 2017/10/05 09:44:51 [error] 6430#0: *1063 connect() failed (111: Connection refused) while connecting to upstream, client: 116.25.250.1, server: , request: \"POST /educate/user/course_submit_list HTTP/1.1\", upstream: \"http://127.0.0.1:8080/educate/user/course_submit_list\", host: \"www.luobocode.com\", referrer: \"https://servicewechat.com/wx2ef86638fe2ab2eb/devtools/page-frame.html\" 查看请求日志，记录如下： 116.25.250.1 - - [05/Oct/2017:11:52:56 +0800] \"POST /educate/user/info HTTP/1.1\" 200 441 \"https://servicewechat.com/wx2ef86638fe2ab2eb/devtools/page-frame.html\" \"wechatdevtools appservice port/9974\" 116.25.250.1 - - [05/Oct/2017:11:52:56 +0800] \"POST /educate/manager/course_list HTTP/1.1\" 200 5056 \"https://servicewechat.com/wx2ef86638fe2ab2eb/devtools/page-frame.html\" \"wechatdevtools appservice port/9974\" 116.25.250.1 - - [05/Oct/2017:11:58:32 +0800] \"POST /educate/manager/course_list HTTP/1.1\" 200 5056 \"https://servicewechat.com/wx2ef86638fe2ab2eb/0/page-frame.html\" \"Mozilla/5.0 (iPhone; CPU iPhone OS 9_0 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Mobile/13A342 MicroMessenger/6.5.18 NetType/4G Language/zh_CN\" 116.25.250.1 - - [05/Oct/2017:11:58:32 +0800] \"POST /educate/user/info HTTP/1.1\" 200 441 \"https://servicewechat.com/wx2ef86638fe2ab2eb/0/page-frame.html\" \"Mozilla/5.0 (iPhone; CPU iPhone OS 9_0 like Mac OS X) AppleWebKit/601.1.46 (KHTML, like Gecko) Mobile/13A342 MicroMessenger/6.5.18 NetType/4G Language/zh_CN\" 40.77.167.0 - - [05/Oct/2017:12:13:51 +0800] \"GET / HTTP/1.1\" 200 59 \"-\" \"Mozilla/5.0 (compatible; bingbot/2.0; +http://www.bing.com/bingbot.htm)\" 103.206.22.250 - - [05/Oct/2017:12:23:13 +0800] \"GET http://azenv.net/ HTTP/1.1\" 200 28 \"-\" \"Mozilla/5.0 (compatible; MSIE 6.0; Windows NT 5.1; Trident/5.0)\" 103.206.22.250 - - [05/Oct/2017:12:23:13 +0800] \"CONNECT www.baidu.com:443 HTTP/1.1\" 400 181 \"-\" \"-\" 方案一，将代理服务的失效时间延长 proxy_connect_timeout 600; proxy_send_timeout 600; proxy_read_timeout 600; send_timeout 600; 方案二，添加缓存功能 proxy_cache_path /home/nginx_cache_dir levels=1:2 keys_zone=cache_one:100m inactive=60m max_size=5g ; location / { proxy_cache_valid 200 302 1h; proxy_cache_valid 301 1d; proxy_cache_valid any 1m; proxy_cache cache_one; expires 10m; add_header X-Proxy-Cache $upstream_cache_status; } 方案三，增加缓存空间，延长时间 keepalive_timeout 600; types_hash_max_size 2048; fastcgi_buffers 8 16k; fastcgi_buffer_size 32k; fastcgi_connect_timeout 300; fastcgi_send_timeout 300; fastcgi_read_timeout 300; 新增报错日志：片段3 2017/10/05 15:46:59 [error] 23492#0: *585 upstream prematurely closed connection while reading response header from upstream, client: 116.25.250.1, server: , request: \"POST /educate/user/info HTTP/1.1\", upstream: \"http://127.0.0.1:8080/educate/user/info\", host: \"www.luobocode.com\", referrer: \"https://servicewechat.com/wx2ef86638fe2ab2eb/devtools/page-frame.html\" 2017/10/05 15:46:59 [error] 23492#0: *552 upstream prematurely closed connection while reading response header from upstream, client: 116.25.250.1, server: , request: \"POST /educate/manager/course_list HTTP/1.1\", upstream: \"http://127.0.0.1:8080/educate/manager/course_list\", host: \"www.luobocode.com\", referrer: \"https://servicewechat.com/wx2ef86638fe2ab2eb/devtools/page-frame.html\" 2017/10/05 15:46:59 [error] 23492#0: *552 connect() failed (111: Connection refused) while connecting to upstream, client: 116.25.250.1, server: , request: \"POST /educate/user/info HTTP/1.1\", upstream: \"http://127.0.0.1:8080/educate/user/info\", host: \"www.luobocode.com\", referrer: \"https://servicewechat.com/wx2ef86638fe2ab2eb/devtools/page-frame.html\" 2017/10/05 15:46:59 [error] 23492#0: *585 connect() failed (111: Connection refused) while connecting to upstream, client: 116.25.250.1, server: , request: \"POST /educate/manager/course_list HTTP/1.1\", upstream: \"http://127.0.0.1:8080/educate/manager/course_list\", host: \"www.luobocode.com\", referrer: \"https://servicewechat.com/wx2ef86638fe2ab2eb/devtools/page-frame.html\" 2017/10/05 15:46:59 [error] 23492#0: *552 connect() failed (111: Connection refused) while connecting to upstream, client: 116.25.250.1, server: , request: \"POST /educate/user/info HTTP/1.1\", upstream: \"http://127.0.0.1:8080/educate/user/info\", host: \"www.luobocode.com\", referrer: \"https://servicewechat.com/wx2ef86638fe2ab2eb/devtools/page-frame.html\" 2017/10/05 15:46:59 [error] 23492#0: *585 connect() failed (111: Connection refused) while connecting to upstream, client: 116.25.250.1, server: , request: \"POST /educate/manager/course_list HTTP/1.1\", upstream: \"http://127.0.0.1:8080/educate/manager/course_list\", host: \"www.luobocode.com\", referrer: \"https://servicewechat.com/wx2ef86638fe2ab2eb/devtools/page-frame.html\" 2017/10/05 15:46:59 [error] 23492#0: *585 connect() failed (111: Connection refused) while connecting to upstream, client: 116.25.250.1, server: , request: \"POST /educate/user/info HTTP/1.1\", upstream: \"http://127.0.0.1:8080/educate/user/info\", host: \"www.luobocode.com\", referrer: \"https://servicewechat.com/wx2ef86638fe2ab2eb/devtools/page-frame.html\" 2017/10/05 15:46:59 [error] 23492#0: *552 connect() failed (111: Connection refused) while connecting to upstream, client: 116.25.250.1, server: , request: \"POST /educate/manager/course_list HTTP/1.1\", upstream: \"http://127.0.0.1:8080/educate/manager/course_list\", host: \"www.luobocode.com\", referrer: \"https://servicewechat.com/wx2ef86638fe2ab2eb/devtools/page-frame.html\" 2017/10/05 15:46:59 [error] 23492#0: *552 connect() failed (111: Connection refused) while connecting to upstream, client: 116.25.250.1, server: , request: \"POST /educate/user/info HTTP/1.1\", upstream: \"http://127.0.0.1:8080/educate/user/info\", host: \"www.luobocode.com\", referrer: \"https://servicewechat.com/wx2ef86638fe2ab2eb/devtools/page-frame.html\" 2017/10/05 15:46:59 [error] 23492#0: *585 connect() failed (111: Connection refused) while connecting to upstream, client: 116.25.250.1, server: , request: \"POST /educate/manager/course_list HTTP/1.1\", upstream: \"http://127.0.0.1:8080/educate/manager/course_list\", host: \"www.luobocode.com\", referrer: \"https://servicewechat.com/wx2ef86638fe2ab2eb/devtools/page-frame.html\" 2017/10/05 15:46:59 [error] 23492#0: *585 connect() failed (111: Connection refused) while connecting to upstream, client: 116.25.250.1, server: , request: \"POST /educate/user/info HTTP/1.1\", upstream: \"http://127.0.0.1:8080/educate/user/info\", host: \"www.luobocode.com\", referrer: \"https://servicewechat.com/wx2ef86638fe2ab2eb/devtools/page-frame.html\" 2017/10/05 15:46:59 [error] 23492#0: *552 connect() failed (111: Connection refused) while connecting to upstream, client: 116.25.250.1, server: , request: \"POST /educate/manager/course_list HTTP/1.1\", upstream: \"http://127.0.0.1:8080/educate/manager/course_list\", host: \"www.luobocode.com\", referrer: \"https://servicewechat.com/wx2ef86638fe2ab2eb/devtools/page-frame.html\"2017/10/05 15:46:59 [error] 23492#0: *552 connect() failed (111: Connection refused) while connecting to upstream, client: 116.25.250.1, server: , request: \"POST /educate/user/info HTTP/1.1\", upstream: \"http://127.0.0.1:8080/educate/user/info\", host: \"www.luobocode.com\", referrer: \"https://servicewechat.com/wx2ef86638fe2ab2eb/devtools/page-frame.html\" 2017/10/05 15:46:59 [error] 23492#0: *552 connect() failed (111: Connection refused) while connecting to upstream, client: 116.25.250.1, server: , request: \"POST /educate/manager/course_list HTTP/1.1\", upstream: \"http://127.0.0.1:8080/educate/manager/course_list\", host: \"www.luobocode.com\", referrer: \"https://servicewechat.com/wx2ef86638fe2ab2eb/devtools/page-frame.html\" 2017/10/05 15:47:00 [error] 23492#0: *552 connect() failed (111: Connection refused) while connecting to upstream, client: 116.25.250.1, server: , request: \"POST /educate/user/info HTTP/1.1\", upstream: \"http://127.0.0.1:8080/educate/user/info\", host: \"www.luobocode.com\", referrer: \"https://servicewechat.com/wx2ef86638fe2ab2eb/devtools/page-frame.html\" 2017/10/05 15:47:00 [error] 23492#0: *552 connect() failed (111: Connection refused) while connecting to upstream, client: 116.25.250.1, server: , request: \"POST /educate/manager/course_list HTTP/1.1\", upstream: \"http://127.0.0.1:8080/educate/manager/course_list\", host: \"www.luobocode.com\", referrer: \"https://servicewechat.com/wx2ef86638fe2ab2eb/devtools/page-frame.html\" 2017/10/05 15:47:00 [error] 23492#0: *552 connect() failed (111: Connection refused) while connecting to upstream, client: 116.25.250.1, server: , request: \"POST /educate/user/info HTTP/1.1\", upstream: \"http://127.0.0.1:8080/educate/user/info\", host: \"www.luobocode.com\", referrer: \"https://servicewechat.com/wx2ef86638fe2ab2eb/devtools/page-frame.html\" 2017/10/05 15:47:00 [error] 23492#0: *552 connect() failed (111: Connection refused) while connecting to upstream, client: 116.25.250.1, server: , request: \"POST /educate/manager/course_list HTTP/1.1\", upstream: \"http://127.0.0.1:8080/educate/manager/course_list\", host: \"www.luobocode.com\", referrer: \"https://servicewechat.com/wx2ef86638fe2ab2eb/devtools/page-frame.html\" nginx参考配置文件： events { worker_connections 768; # multi_accept on; } http { access_log /var/log/nginx/access.log; error_log /var/log/nginx/error.log; proxy_cache_path /var/cache/nginx levels=1:2 keys_zone=one:8m max_size=3000m inactive=600m; proxy_temp_path /var/tmp; include mime.types; default_type application/octet-stream; sendfile on; keepalive_timeout 65; gzip on; gzip_comp_level 6; gzip_vary on; gzip_min_length 1000; gzip_proxied any; # gzip_types text/plain text/html text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript; gzip_buffers 16 8k; # ssl_certificate /some/location/luobocode.com.bundle.crt; # ssl_certificate_key /some/location/luobocode.com.key; # ssl_protocols SSLv3 TLSv1; # ssl_ciphers HIGH:!aNULL:!MD5; upstream www.luobocode.com { server 127.0.0.1:8080; keepalive 64; } # server { # listen 80; # rewrite ^(.*) https://$host$1 permanent; # } server { listen 80; listen [::]:80; server_name www.luobocode.com; return 301 https://www.luobocode.com$request_uri; } server { listen 443 ssl; listen [::]:443 ssl; server_name www.luobocode.com; ssl on; ssl_certificate 1_www.luobocode.com_bundle.crt; ssl_certificate_key 2_www.luobocode.com.key; ssl_session_timeout 5m; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; #按照这个协议配置 ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;#按照这个套件配置 ssl_prefer_server_ciphers on; location / { proxy_redirect off; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_set_header Host $http_host; proxy_set_header X-NginX-Proxy true; proxy_set_header Connection \"\"; proxy_http_version 1.1; proxy_cache one; proxy_cache_key sfs$request_uri$scheme; proxy_pass http://www.luobocode.com; } } }"},{"title":"博客添加代码高亮特性","date":"2017-10-04T21:15:19.000Z","path":"2017/10/05/blog-code-highlight-feature/","text":"目标：为博客添加代码高亮特性，让代码部分的观赏性加分。 工具hexo-prism-plugin 安装npm i -S hexo-prism-plugin 配置在博客的配置文件_config.yml，加入配置语句： prism_plugin: mode: 'preprocess' # realtime/preprocess theme: 'duotone-light' line_number: false # default false 禁止默认 highlight配置： highlight: enable: false 修改样式将代码块设为圆角，添加浅浅边框，修改后视觉效果更加柔和美观。这里我们只需要修改pre选项，因为所有的代码块都包含在pre节点内,为避免干扰其他使用pre的样式，可加.page前缀。 .page pre { border: 1px solid rgba(0, 0, 0, 0.3); border-radius: 10px; } 清除缓存并启动hexo clean hexo s"},{"title":"网络存储","date":"2017-10-03T12:05:03.000Z","path":"2017/10/03/web-storage/","text":"设备 威联通（QNAP）TS-231P 1G 内存 2盘位NAS网络存储器 双核1.7GHz处理器 2个网络端口 初始化安装"},{"title":"博客实现搜索功能","date":"2017-10-02T16:10:09.000Z","path":"2017/10/03/blog-search-feature/","text":"目标：为博客添加搜索功能，方便用户快速查找对应的文章。实现搜索功能，有两种途径：1）使用第三方搜索公司提供的服务；2）通过自己获取网站数据和关键字匹配，实现搜索功能 第三方服务Algolia可采用Github账号登录使用 自定义搜索功能第一步，我们要获取博客网站的数据，放入文件中，作为搜索功能的数据源。对此我们选用的工具是：hexo-generator-json-content安装方式： npm i -S hexo-generator-json-content 配置在博客配置 _config.yml,添加上面插件的配置语句： jsonContent: meta: false pages: false posts: title: true date: true path: true text: true raw: false content: false slug: false updated: false comments: false link: false permalink: false excerpt: false categories: false tags: false 启动 hexo serve 将自动生成 content.json文件，格式如下： [{ //-> only published posts title: post.title, date: post.date, text: post.content, //-> only text minified ;) path: post.path }] 第二步，通过关键字，获取数据源中的匹配文章。这里我们将提供一个搜索函数search()，传入关键字，返回相匹配的文章列表。 function search(keywords){ // 关键字 => 正则，空格隔开的看作多个关键字 // a b c => /a|b|c/gmi var result = []; var regExp = new RegExp(key.replace(/[ ]/g, '|'), 'gmi'); loadData(function(data){ result = data.filter(function(post){ return matcher(post,regExp); }) }) } 定义数据源读取函数loadData() var searchData; function loadData(success) { if (!searchData) { var xhr = new XMLHttpRequest(); xhr.open('GET', '/content.json', true); xhr.onload = function() { if (this.status >= 200 &amp;&amp; this.status &lt; 300) { var res = JSON.parse(this.response || this.responseText); searchData = res instanceof Array ? res : res.posts; success(searchData); } else { console.error(this.statusText); } }; xhr.onerror = function() { console.error(this.statusText); }; xhr.send(); } else { success(searchData); } } 定义正则匹配函数 function matcher(post, regExp) { // 匹配优先级：title > tags > text return regtest(post.title, regExp) || post.tags.some(function(tag) { return regtest(tag.name, regExp); }) || regtest(post.text, regExp); } function regtest(raw, regExp) { regExp.lastIndex = 0; return regExp.test(raw); }"},{"title":"相册功能","date":"2017-09-22T08:31:58.000Z","path":"2017/09/22/gallery/","text":"目标：为博客添加酷炫的相册功能 工具PhotoSwipe 用法引入js和css文件 &lt;!-- Core CSS file --> &lt;link rel=\"stylesheet\" href=\"path/to/photoswipe.css\"> &lt;!-- Skin CSS file (styling of UI - buttons, caption, etc.) In the folder of skin CSS file there are also: - .png and .svg icons sprite, - preloader.gif (for browsers that do not support CSS animations) --> &lt;link rel=\"stylesheet\" href=\"path/to/default-skin/default-skin.css\"> &lt;!-- Core JS file --> &lt;script src=\"path/to/photoswipe.min.js\">&lt;/script> &lt;!-- UI JS file --> &lt;script src=\"path/to/photoswipe-ui-default.min.js\">&lt;/script> 在页面合适的地方，放置photoswipe &lt;!-- Root element of PhotoSwipe. Must have class pswp. --> &lt;div class=\"pswp\" tabindex=\"-1\" role=\"dialog\" aria-hidden=\"true\"> &lt;!-- Background of PhotoSwipe. It's a separate element as animating opacity is faster than rgba(). --> &lt;div class=\"pswp__bg\">&lt;/div> &lt;!-- Slides wrapper with overflow:hidden. --> &lt;div class=\"pswp__scroll-wrap\"> &lt;!-- Container that holds slides. PhotoSwipe keeps only 3 of them in the DOM to save memory. Don't modify these 3 pswp__item elements, data is added later on. --> &lt;div class=\"pswp__container\"> &lt;div class=\"pswp__item\">&lt;/div> &lt;div class=\"pswp__item\">&lt;/div> &lt;div class=\"pswp__item\">&lt;/div> &lt;/div> &lt;!-- Default (PhotoSwipeUI_Default) interface on top of sliding area. Can be changed. --> &lt;div class=\"pswp__ui pswp__ui--hidden\"> &lt;div class=\"pswp__top-bar\"> &lt;!-- Controls are self-explanatory. Order can be changed. --> &lt;div class=\"pswp__counter\">&lt;/div> &lt;button class=\"pswp__button pswp__button--close\" title=\"Close (Esc)\">&lt;/button> &lt;button class=\"pswp__button pswp__button--share\" title=\"Share\">&lt;/button> &lt;button class=\"pswp__button pswp__button--fs\" title=\"Toggle fullscreen\">&lt;/button> &lt;button class=\"pswp__button pswp__button--zoom\" title=\"Zoom in/out\">&lt;/button> &lt;!-- Preloader demo http://codepen.io/dimsemenov/pen/yyBWoR --> &lt;!-- element will get class pswp__preloader--active when preloader is running --> &lt;div class=\"pswp__preloader\"> &lt;div class=\"pswp__preloader__icn\"> &lt;div class=\"pswp__preloader__cut\"> &lt;div class=\"pswp__preloader__donut\">&lt;/div> &lt;/div> &lt;/div> &lt;/div> &lt;/div> &lt;div class=\"pswp__share-modal pswp__share-modal--hidden pswp__single-tap\"> &lt;div class=\"pswp__share-tooltip\">&lt;/div> &lt;/div> &lt;button class=\"pswp__button pswp__button--arrow--left\" title=\"Previous (arrow left)\"> &lt;/button> &lt;button class=\"pswp__button pswp__button--arrow--right\" title=\"Next (arrow right)\"> &lt;/button> &lt;div class=\"pswp__caption\"> &lt;div class=\"pswp__caption__center\">&lt;/div> &lt;/div> &lt;/div> &lt;/div> &lt;/div> 初始化gallery var pswpElement = document.querySelectorAll('.pswp')[0]; // build items array var items = [ { src: 'https://placekitten.com/600/400', w: 600, h: 400 }, { src: 'https://placekitten.com/1200/900', w: 1200, h: 900 } ]; // define options (if needed) var options = { // optionName: 'option value' // for example: index: 0 // start at first slide }; // Initializes and opens PhotoSwipe var gallery = new PhotoSwipe( pswpElement, PhotoSwipeUI_Default, items, options); gallery.init(); 图片工具fancyBox3快速入门 &lt;!-- 1. Add latest jQuery and fancyBox files --> &lt;script src=\"//code.jquery.com/jquery-3.2.1.min.js\">&lt;/script> &lt;link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/fancybox/3.1.25/jquery.fancybox.min.css\" /> &lt;script src=\"https://cdnjs.cloudflare.com/ajax/libs/fancybox/3.1.25/jquery.fancybox.min.js\">&lt;/script> &lt;!-- 2. Create links --> &lt;a data-fancybox=\"gallery\" href=\"big_1.jpg\">&lt;img src=\"small_1.jpg\">&lt;/a> &lt;a data-fancybox=\"gallery\" href=\"big_2.jpg\">&lt;img src=\"small_2.jpg\">&lt;/a> &lt;!-- 3. Have fun! -->"},{"title":"Hello World","date":"2013-07-14T09:01:34.000Z","path":"2013/07/14/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post$ hexo new \"My New Post\" More info: Writing Run server$ hexo server More info: Server Generate static files$ hexo generate More info: Generating Deploy to remote sites$ hexo deploy More info: Deployment"}]